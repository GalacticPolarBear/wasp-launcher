(*
Utility methods
*)

{$DEFINE WS_UTILS_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

procedure TerminateScript(reason: String); overload;
begin
  WriteLn('Terminating: ' + reason);
  TerminateScript();
end;

procedure DebugLn(name, text: String);
begin
  WriteLn(SRL.TimeStamp() + ':[' + name + ']: ' + text);
end;

function TJSONArray.High(): Int32;
begin
  if Self = nil then
    Exit(-1);
  Result := Self.length()-1;
end;

{$IFDEF WINDOWS}
function ShowWindow(hwnd: TOSWindow; nCmdShow: UInt32): LongBool;
external 'ShowWindow@user32.dll ' + WINAPI_CC;

function SetWindowAttribute(hwnd: TOSWindow; dwAttribute: DWORD; pvAttribute: Pointer; cbAttribute: DWORD): UInt32;
external 'DwmSetWindowAttribute@dwmapi.dll ' + WINAPI_CC;

function SetWindowDarkTitleBar(hwnd: TOSWindow): UInt32;
const
  DWMWA_USE_IMMERSIVE_DARK_MODE: Integer = 20;
  DARK: LongBool = True;
begin
  Result := SetWindowAttribute(hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, @DARK, SizeOf(DARK));
end;

type PWideChar = ^WideChar;

function SetWindowTheme(hwnd: TOSWindow; pszSubAppName: PWideChar; pszSubIdList: PWideChar): UInt32;
external 'SetWindowTheme@uxtheme.dll ' + WINAPI_CC;

function SetWindowTheme(hwnd: TOSWindow; pszSubAppName: WideString; pszSubIdList: PWideChar = nil): UInt32; overload;
begin
  Result := SetWindowTheme(hwnd, PWideChar(pszSubAppName), pszSubIdList);
end;

function GetProcAddr(handle: PtrUInt; name: PChar): Pointer;
external 'GetProcAddress@kernel32.dll '+ WINAPI_CC;

type
{$SCOPEDENUMS ON}
  TPreferredAppMode = (Default, AllowDark, ForceDark, ForceLight, Max);
{$SCOPEDENUMS OFF}

var
  ShouldAppUseDarkMode: function(): LongBool;
  AllowDarkModeForWindow: function(hWnd: TOSWindow; allow: LongBool): LongBool;
  AllowDarkModeForApp: function(allow: LongBool): LongBool;
  SetPreferredAppMode: function(appMode: TPreferredAppMode): TPreferredAppMode;
  FlushMenuThemes: procedure();
  RefreshImmersiveColorPolicyState: procedure();
{$ENDIF}
