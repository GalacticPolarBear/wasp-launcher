(*
Utility methods
*)

{$DEFINE WS_UTILS_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

procedure TerminateScript(reason: String); overload;
begin
  WriteLn('Terminating: ' + reason);
  TerminateScript();
end;

function CountSimbaWindows(): Int32;
var
  wins: TOSWindowArray;
begin
  wins := GetWindows();
  Result := Length(wins.GetByTitleAndClass('Simba', 'Window'));
end;

procedure DebugLn(name, text: String);
begin
  WriteLn(SRL.TimeStamp() + ':[' + name + ']: ' + text);
end;


procedure DeleteAsyncFile(name: String);
var
  path: String;
begin
  if not name.EndsWith('.simba') then
    name += '.simba';
  path := LAUNCHER_DATA + 'async' + DirectorySeparator + name;
  if FileExists(path) and not DeleteFile(path) then
    TerminateScript('Failed to delete async file: ' + name);
end;

procedure WriteAsyncFile(name, content: String; autoDelete: Boolean = True);
var
  path: String;
begin
  if not name.EndsWith('.simba') then
    name += '.simba';
  DeleteAsyncFile(name);

  path := LAUNCHER_DATA + 'async' + DirectorySeparator;

  if not ForceDirectories(path) then
    TerminateScript('Failed to create async files directory.');

  if autoDelete then
  begin
    content := content.Replace('TerminateScript();', 'begin DeleteFile(ScriptFile); TerminateScript(); end;');
    content := content.Replace('TerminateScript;', 'begin DeleteFile(ScriptFile); TerminateScript(); end;');
    content += LineEnding + LineEnding + 'begin DeleteFile(ScriptFile); end;';
  end;

  if not WriteFileContents(path + name, content, False) then
    TerminateScript('Failed to write async file: ' + name);
end;

procedure RunAsyncFile(name: String; params: TStringArray);
var
  path: String;
begin
  if not name.EndsWith('.simba') then
    name += '.simba';
  path := LAUNCHER_DATA + 'async' + DirectorySeparator;

  RunScript(path + name, params);
end;


{$IFDEF WINDOWS}
const
  WINAPI_CC = {$IFDEF CPU386}'stdcall'{$ELSE}'win64'{$ENDIF};
  DARK_MODE_ATTRIBUTE = 20;

function ShowWindow(hwnd: TOSWindow; nCmdShow: UInt32): LongBool;
external 'ShowWindow@user32.dll ' + WINAPI_CC;

function SetWindowAttribute(hwnd: TOSWindow; dwAttribute: DWORD; pvAttribute: Pointer; cbAttribute: DWORD): UInt32;
external 'DwmSetWindowAttribute@dwmapi.dll ' + WINAPI_CC;

function SetWindowAttribute(hwnd: TOSWindow; dwAttribute: DWORD; pvAttribute: LongBool): UInt32; overload;
begin
  Result := SetWindowAttribute(hwnd, dwAttribute, @pvAttribute, SizeOf(pvAttribute));
end;

function SetWindowDarkTitleBar(hwnd: TOSWindow): UInt32;
begin
  Result := SetWindowAttribute(hwnd, DARK_MODE_ATTRIBUTE, True);
end;

type PWideChar = ^WideChar;

function SetWindowTheme(hwnd: TOSWindow; pszSubAppName: PWideChar; pszSubIdList: PWideChar): UInt32;
external 'SetWindowTheme@uxtheme.dll ' + WINAPI_CC;

function SetWindowTheme(hwnd: TOSWindow; pszSubAppName: WideString; pszSubIdList: PWideChar = nil): UInt32; overload;
begin
  Result := SetWindowTheme(hwnd, PWideChar(pszSubAppName), pszSubIdList);
end;

function GetProcAddr(handle: PtrUInt; name: PChar): Pointer;
external 'GetProcAddress@kernel32.dll '+ WINAPI_CC;

type
{$SCOPEDENUMS ON}
  TPreferredAppMode = (Default, AllowDark, ForceDark, ForceLight, Max);
{$SCOPEDENUMS OFF}

var
{$H-}
  ShouldAppUseDarkMode: function(): LongBool;
  AllowDarkModeForWindow: function(hWnd: TOSWindow; allow: LongBool): LongBool;
  AllowDarkModeForApp: function(allow: LongBool): LongBool;
  SetPreferredAppMode: function(appMode: TPreferredAppMode): TPreferredAppMode;
  FlushMenuThemes: procedure();
  RefreshImmersiveColorPolicyState: procedure();
{$H+}
{$ENDIF}
