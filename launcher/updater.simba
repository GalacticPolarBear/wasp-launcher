{$DEFINE WS_UPDATER_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

type
  TScriptFile = record
    ID: String;
    Revision: Int32;
    Path: String;
  end;

  TScriptFileArray = array of TScriptFile;

  TWaspUpdater = record
    Name: String;
    Launcher: TScriptFile;

    Scripts: TScriptFileArray;
    ScriptsPath: String;

    MonitorSRLT: TMonitor;
    MonitorWL: TMonitor;

    UpdateAfterLogin: Boolean;
  end;

var
  WaspUpdater: TWaspUpdater;

procedure TMonitor.NextState(); forward;

procedure TMonitor._OnTimer(sender: TObject);
var
  fileName: String;
begin
  fileName := WaspAsync.Path + Self.CurrentFile;

  if FileExists(fileName) and DeleteFile(fileName) then
  begin
    TTimer(sender).SetEnabled(False);
    Self.NextState();
  end;
end;

procedure TMonitor.NextState();
var
  params: TStringArray;
begin
  Self.State := EMonitorState(Ord(Self.State) + 1);
  if Self.State > High(EMonitorState) then
    Self.State := EMonitorState.NONE;

  case Self.State of
    EMonitorState.DOWNLOAD:
    begin
      Self.CurrentFile := 'downloader-' + LowerCase(Self.Package) + '.done';
      GitHubClient.Download(Self.Package);

      Self.Caption.setCaption('Downloading');
      Self.Caption.SetFontColor($00CCFF);
      Self.Caption.Repaint();
      Self.Button.setEnabled(False);

      Self.Timer.SetEnabled(True);
    end;

    EMonitorState.UNZIP:
    begin
      Self.CurrentFile := 'unzipper-' + LowerCase(Self.Package) + '.done';
      params := ['path=' + GitHubClient.DownloadPath, 'name=' + Self.Package];
      WaspAsync.Run('unzipper', params);

      Self.Caption.setCaption('Unzipping');
      Self.Caption.SetFontColor($00CCAA);
      Self.Caption.Repaint();

      Self.Timer.SetEnabled(True);
    end;

    EMonitorState.CLEAN:
    begin
      Self.CurrentFile := 'mover-' + LowerCase(Self.Package) + '.done';
      params := ['origin=' + GitHubClient.DownloadPath, 'pkg=' + Self.Package];
      WaspAsync.Run('mover', params);

      Self.Caption.setCaption('Cleaning');
      Self.Caption.SetFontColor($00CCAA);
      Self.Caption.Repaint();

      Self.Timer.SetEnabled(True);
    end;

    EMonitorState.NONE:
    begin
      Self.CurrentFile := '';

      case LowerCase(Self.Package) of
        'srl-t', 'srlt':
        begin
          GitHubClient.Packages.Current.SRLT := GitHubClient.GetCurrentPackageVersion('srl-t');
          if GitHubClient.Packages.Current.SRLT = '' then
            Self.Caption.setCaption('Missing')
          else
            Self.Caption.setCaption('v.' + GitHubClient.Packages.Current.SRLT);

          if GitHubClient.Packages.Current.SRLT <> GitHubClient.Packages.Latest.SRLT then
            Self.Caption.SetFontColor($1800E9)
          else
            Self.Caption.SetFontColor($18E982);
          Self.Caption.Repaint();
        end;
        'wasplib', 'wl':
        begin
          GitHubClient.Packages.Current.WaspLib := GitHubClient.GetCurrentPackageVersion('wasplib');
          if GitHubClient.Packages.Current.WaspLib = '' then
            Self.Caption.setCaption('Missing')
          else
            Self.Caption.setCaption('v.' + GitHubClient.Packages.Current.WaspLib);

          if GitHubClient.Packages.Current.WaspLib <> GitHubClient.Packages.Latest.WaspLib then
            Self.Caption.SetFontColor($1800E9)
          else
            Self.Caption.SetFontColor($18E982);
          Self.Caption.Repaint();
        end;
      end;

      Self.Caption.Repaint();
      Self.Button.setEnabled(True);
      Self.Timer.setEnabled(False);
    end;
  end;
end;

procedure TMonitor.RunMonitor(caption, button: TComponent);
begin
  if not Self.IsSetup then
  begin
    Self.Caption := caption;
    Self.Button := button;
    Self.Timer.setOnTimer(@Self._OnTimer);
    Self.IsSetup := True;
  end;

  Self.NextState();
end;


procedure TWaspUpdater.Update(pkg: String; caption, button: TComponent);
begin
  case pkg of
    'srlt':    Self.MonitorSRLT.RunMonitor(caption, button);
    'wasplib': Self.MonitorWL.RunMonitor(caption, button);
  end;
end;


function TWaspUpdater.GetScriptFileEx(filepath: String): TScriptFile;
var
  id, fileContent: String;
begin
  id := ExtractFileName(filepath).Before('.simba');
  if not id.IsUUID() then
    Exit;
  Result.ID := id;
  Result.Path := filepath;
  fileContent := ReadFileContents(filepath);
  Result.Revision := StrToIntDef(fileContent.After('SCRIPT_REVISION := ''').Before('''}'), 0);
end;

function TWaspUpdater.GetScriptFiles(): TScriptFileArray;
var
  files: TStringArray;
  i: Int32;
  script: TScriptFile;
begin
  if Self.Scripts <> [] then
    Exit(Self.Scripts);

  files := GetFiles(Self.ScriptsPath, 'simba');
  for i := 0 to High(files) do
  begin
    script := GetScriptFileEx(Self.ScriptsPath + files[i]);
    if script <> [] then
      Result += script;
  end;

  Self.Scripts := Result;
end;

function TWaspUpdater.GetScriptFile(id: String): TScriptFile;
var
  i: Int32;
  scripts: TScriptFileArray;
begin
  scripts := Self.GetScriptFiles();
  for i := 0 to High(scripts) do
    if id = scripts[i].ID then
      Exit(scripts[i]);
end;

procedure TWaspUpdater.UpdateScriptFileRevision(script: TScriptFile);
var
  i: Int32;
begin
  for i := 0 to High(Self.Scripts) do
    if Self.Scripts[i].ID = script.ID then
    begin
      Self.Scripts[i] := script;
      Exit;
    end;

  Self.Scripts += script;
end;

procedure TWaspUpdater.UpdateScript(script: TScriptData);
var
  files: TStringArray;
  fileName, path: String;
begin
  files := GetFiles(WaspClient.DownloadPath, 'simba');
  for fileName in files do
    DeleteFile(WaspClient.DownloadPath + fileName);

  WaspClient.DownloadScript(script.ID, script.Revision);

  files := GetFiles(WaspClient.DownloadPath, 'simba');
  if Length(files) <> 1 then
    Exit;

  fileName := files[0];
  path := Self.ScriptsPath + fileName;
  if FileExists(path) and not DeleteFile(path) then
    TerminateScript('Failed to delete old script: ' + fileName);

  if not RenameFile(WaspClient.DownloadPath + fileName, path) then
  begin
    DeleteFile(WaspClient.DownloadPath + fileName);
    TerminateScript('Failed to move script: ' + fileName);
  end;

  Self.UpdateScriptFileRevision(Self.GetScriptFileEx(path));
end;


procedure TWaspUpdater.SelfUpdate();
begin
  Self.UpdateScript(WaspClient.Cache.Launcher);

  if FileExists(Self.ScriptsPath + Self.Launcher.ID + '.simba') then
  begin
    if FileExists(Self.Launcher.Path) and not DeleteFile(Self.Launcher.Path) then
      TerminateScript('Failed to delete old launcher.');

    if not CopyFile(Self.ScriptsPath + Self.Launcher.ID + '.simba', Self.Launcher.Path) then
      TerminateScript('Failed to copy updated launcher to it''s directory.');
  end;
end;

procedure TWaspUpdater.Free();
begin
  Self.MonitorSRLT.Timer.Free();
  Self.MonitorWL.Timer.Free();
end;

procedure TWaspUpdater.Setup();
begin
  Self.Name := 'WaspUpdater';
  Self.Launcher.ID := {$macro SCRIPT_ID};
  Self.Launcher.Revision := StrToIntDef({$macro SCRIPT_REVISION}, 1);

  Self.Launcher.Path := ScriptPath + 'wasp-launcher.simba';
  Self.ScriptsPath := ScriptPath + 'waspscripts.com' + DirectorySeparator;

  if not ForceDirectories(Self.ScriptsPath) then
    TerminateScript('WaspUpdater can''t create scripts directory.');;

  Self.MonitorSRLT.Package := 'srl-t';
  Self.MonitorSRLT.Timer.Init(nil);
  Self.MonitorSRLT.Timer.setName('srlt_update_monitor');
  Self.MonitorSRLT.Timer.setInterval(200);

  Self.MonitorWL.Package := 'wasplib';
  Self.MonitorWL.Timer.Init(nil);
  Self.MonitorWL.Timer.setName('srlt_update_monitor');
  Self.MonitorWL.Timer.setInterval(200);

  AddOnTerminate(@Self.Free);
end;

