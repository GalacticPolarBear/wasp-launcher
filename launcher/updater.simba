{$DEFINE WS_UPDATER_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

type
  TScriptFile = record
    ID: String;
    Revision: Int32;
    Path: String;
  end;

  TScriptFileArray = array of TScriptFile;

  EUpdaterState = (NONE, DOWNLOAD, UNZIP, CLEAN);

  TMonitor = record
    Package: String;
    CurrentFile: String;
    State: EUpdaterState;
    IsSetup: Boolean;

    Caption: TLabel;
    Button: TButton;
    Timer: TTimer;
  end;

  TWaspUpdater = record
    Name: String;
    Launcher: TScriptFile;

    Scripts: TScriptFileArray;
    ScriptsPath: String;

    MonitorSRLT: TMonitor;
    MonitorWL: TMonitor;

    UpdateAfterLogin: Boolean;
  end;

var
  WaspUpdater: TWaspUpdater;

procedure TMonitor.NextState(); forward;

procedure TMonitor._OnTimer(sender: TObject);
begin
  if not FileExists(LAUNCHER_DATA + 'async' + DirectorySeparator + Self.CurrentFile) then
  begin
    TTimer(sender).SetEnabled(False);
    Self.NextState();
  end;
end;

procedure TMonitor.NextState();
var
  params: TStringArray;
begin
  Self.State := EUpdaterState(Ord(Self.State) + 1);
  if Self.State > High(EUpdaterState) then
    Self.State := EUpdaterState.NONE;

  case Self.State of
    EUpdaterState.DOWNLOAD:
    begin
      Self.CurrentFile := Self.Package + '-downloader.simba';
      GitHubClient.Download(Self.Package);

      Self.Caption.setCaption('Downloading');
      Self.Caption.SetFontColor($00CCFF);
      Self.Caption.Repaint();
      Self.Button.setEnabled(False);

      Self.Timer.SetEnabled(True);
    end;

    EUpdaterState.UNZIP:
    begin
      Self.CurrentFile := Self.Package + '-unzipper.simba';

      WriteAsyncFile(Self.CurrentFile, WaspUpdater.GetUnzipperContent());
      params := ['path=' + GitHubClient.DownloadPath, 'name=' + Self.Package];
      RunAsyncFile(Self.CurrentFile, params);

      Self.Caption.setCaption('Unzipping');
      Self.Caption.SetFontColor($00CCAA);
      Self.Caption.Repaint();

      Self.Timer.SetEnabled(True);
    end;

    EUpdaterState.CLEAN:
    begin
      Self.CurrentFile := Self.Package + '-mover.simba';

      WriteAsyncFile(Self.CurrentFile, WaspUpdater.GetMoverContent());
      params := ['origin=' + GitHubClient.DownloadPath, 'pkg=' + Self.Package];
      RunAsyncFile(Self.CurrentFile, params);

      Self.Caption.setCaption('Cleaning');
      Self.Caption.SetFontColor($00CCAA);
      Self.Caption.Repaint();

      Self.Timer.SetEnabled(True);
    end;

    EUpdaterState.NONE:
    begin
      Self.CurrentFile := '';

      case LowerCase(Self.Package) of
        'srl-t', 'srlt':
        begin
          GitHubClient.Packages.Current.SRLT := GitHubClient.GetCurrentPackageVersion('srl-t');
          if GitHubClient.Packages.Current.SRLT = '' then
            Self.Caption.setCaption('Missing')
          else
            Self.Caption.setCaption('v.' + GitHubClient.Packages.Current.SRLT);

          if GitHubClient.Packages.Current.SRLT <> GitHubClient.Packages.Latest.SRLT then
            Self.Caption.SetFontColor($1800E9)
          else
            Self.Caption.SetFontColor($18E982);
          Self.Caption.Repaint();
        end;
        'wasplib', 'wl':
        begin
          GitHubClient.Packages.Current.WaspLib := GitHubClient.GetCurrentPackageVersion('wasplib');
          if GitHubClient.Packages.Current.WaspLib = '' then
            Self.Caption.setCaption('Missing')
          else
            Self.Caption.setCaption('v.' + GitHubClient.Packages.Current.WaspLib);

          if GitHubClient.Packages.Current.WaspLib <> GitHubClient.Packages.Latest.WaspLib then
            Self.Caption.SetFontColor($1800E9)
          else
            Self.Caption.SetFontColor($18E982);
          Self.Caption.Repaint();
        end;
      end;

      Self.Caption.Repaint();
      Self.Button.setEnabled(True);
      Self.Timer.setEnabled(False);
    end;
  end;
end;

procedure TMonitor.RunMonitor(caption, button: TComponent);
begin
  if not Self.IsSetup then
  begin
    Self.Caption := caption;
    Self.Button := button;
    Self.Timer.setOnTimer(@Self._OnTimer);
    Self.IsSetup := True;
  end;

  Self.NextState();
end;

function TWaspUpdater.GetUnzipperContent(): String;
begin
  Result += "var path, name: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  path := GetProcessParameter('path');" + LineEnding;
  Result += "  name := GetProcessParameter('name');" + LineEnding;
  Result += "  WriteLn('[AsyncUnzipper]: Unzipping ', name, ', this might take a while.');" + LineEnding;
  Result += "  try" + LineEnding;
  Result += "    UnZipFile(path + name + '.zip', path + name);" + LineEnding;
  Result += "    DeleteFile(path + name + '.zip');" + LineEnding;
  Result += "  except" + LineEnding;
  Result += "    WriteLn(GetExceptionMessage());" + LineEnding;
  Result += "  end;" + LineEnding;
  Result += "end;" + LineEnding;
end;

function TWaspUpdater.GetMoverContent(): String;
begin
  Result += "const SEP = DirectorySeparator;" + LineEnding + LineEnding;
  Result += "procedure TerminateScript(reason: String); overload;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  WriteLn('[AsyncMover]: Terminating: ' + reason);" + LineEnding;
  Result += "  begin DeleteFile(ScriptFile); TerminateScript(); end;" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "function BackupFile(filePath: String): Boolean;" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  f: Int32;" + LineEnding;
  Result += "  str: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  f := OpenFile(filePath, False);" + LineEnding + LineEnding;
  Result += "  if not ReadFileString(f, str, FileSize(f)) then" + LineEnding;
  Result += "    Exit;" + LineEnding + LineEnding;
  Result += "  CloseFile(f);" + LineEnding;
  Result += "  Result := WriteFileContents(filePath + '.bak', str, False);" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "function RestoreFile(filePath: String): Boolean;" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  f: Int32;" + LineEnding;
  Result += "  str: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  f := OpenFile(filePath + '.bak', False);" + LineEnding;
  Result += "  if not ReadFileString(f, str, FileSize(f)) then" + LineEnding;
  Result += "    Exit;" + LineEnding + LineEnding;
  Result += "  CloseFile(f);" + LineEnding;
  Result += "  Result := WriteFileContents(filePath, str, False);" + LineEnding;
  Result += "  DeleteFile(filePath + '.bak');" + LineEnding;
  Result += "end;" + LineEnding + LineEnding + LineEnding;
  Result += "function IsFileLocked(path: String): Boolean;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  if not FileExists(path) then" + LineEnding;
  Result += "    Exit;" + LineEnding + LineEnding;
  Result += "  if not BackupFile(path) then" + LineEnding;
  Result += "    TerminateScript('Failed to backup file: ' + path);" + LineEnding + LineEnding;
  Result += "  Result := not DeleteFile(path);" + LineEnding + LineEnding;
  Result += "  if Result then" + LineEnding;
  Result += "    DeleteFile(path + '.bak')" + LineEnding;
  Result += "  else if not RestoreFile(path) then" + LineEnding;
  Result += "    TerminateScript('Failed to restore file: ' + path);" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "function FindLockedPlugins(): TStringArray;" + LineEnding;
  Result += "const" + LineEnding;
  Result += "  PATHS = [" + LineEnding;
  Result += "    IncludePath + 'SRL'   + SEP + 'plugins' + SEP + 'libremoteinput' + SEP," + LineEnding;
  Result += "    IncludePath + 'SRL-T' + SEP + 'plugins' + SEP + 'libremoteinput' + SEP" + LineEnding;
  Result += "  ];" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  path, plugin: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  for path in PATHS do" + LineEnding;
  Result += "    for plugin in FindFiles(path, False) do" + LineEnding;
  Result += "      if IsFileLocked(plugin) then" + LineEnding;
  Result += "        Result += plugin;" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "procedure KillClients();" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  window: TOSWindow;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  for window in GetWindows().GetByClass('SunAwtCanvas') do" + LineEnding;
  Result += "    window.Kill();" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "procedure KillJLaunchers();" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  window: TOSWindow;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  for window in GetWindows().GetByClass('Jagex Launcher') do" + LineEnding;
  Result += "  begin" + LineEnding;
  Result += "    window.Kill();" + LineEnding;
  Result += "    Break;" + LineEnding;
  Result += "  end;" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "procedure KillSimbas();" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  windows, simbas: TOSWindowArray;" + LineEnding;
  Result += "  win: TOSWindow;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  windows := GetWindows();" + LineEnding;
  Result += "  simbas := windows.GetByTitleAndClass('Output,File Browser,Editor,Function List', 'Window');" + LineEnding + LineEnding;
  Result += "  if MessageDlg('Close Simba', 'Simba needs to be restarted.'," + LineEnding;
  Result += "     TMsgDlgType.mtConfirmation, [mbOK, mbAbort]) = 3 then" + LineEnding;
  Result += "    TerminateScript('You need to close all Simba windows to update SRL.');" + LineEnding + LineEnding;
  Result += "  for win in simbas do" + LineEnding;
  Result += "    win.Kill();" + LineEnding + LineEnding;
  Result += "  begin DeleteFile(ScriptFile); TerminateScript(); end;" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "procedure UnlockPlugins();" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  locked: TStringArray;" + LineEnding;
  Result += "  plugin: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  locked := FindLockedPlugins();" + LineEnding;
  Result += "  if locked = [] then" + LineEnding;
  Result += "    Exit;" + LineEnding + LineEnding;
  Result += "  if MessageDlg('Close RuneScape', 'RS Clients need to be closed to update this package.'," + LineEnding;
  Result += "     TMsgDlgType.mtConfirmation, [mbOK, mbAbort]) = 3 then" + LineEnding;
  Result += "    TerminateScript('You need to close your RS Clients to update SRL.');" + LineEnding + LineEnding;
  Result += "  KillClients();" + LineEnding + LineEnding;
  Result += "  for plugin in locked do" + LineEnding;
  Result += "    if IsFileLocked(plugin) then" + LineEnding;
  Result += "    begin" + LineEnding;
  Result += "      KillJLaunchers();" + LineEnding;
  Result += "      Break;" + LineEnding;
  Result += "    end;" + LineEnding + LineEnding;
  Result += "  for plugin in locked do" + LineEnding;
  Result += "    if IsFileLocked(plugin) then" + LineEnding;
  Result += "    begin" + LineEnding;
  Result += "      KillSimbas();" + LineEnding;
  Result += "      Break;" + LineEnding;
  Result += "    end;" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "function DelDirectory(path: String; deleteRoot: Boolean = True): Boolean;" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  f, tmp: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  for f in FindFiles(path, True) do" + LineEnding;
  Result += "  begin" + LineEnding;
  Result += "    if Pos(SEP + '.git' + SEP, f) > 0 then" + LineEnding;
  Result += "    begin" + LineEnding;
  Result += "      deleteRoot := False;" + LineEnding;
  Result += "      Continue;" + LineEnding;
  Result += "    end;" + LineEnding + LineEnding;
  Result += "    if not DeleteFile(f) then" + LineEnding;
  Result += "      Exit;" + LineEnding + LineEnding;
  Result += "    tmp := ExtractFilePath(f);" + LineEnding;
  Result += "    if (FindFiles(tmp, True) = []) and (FindDirectories(tmp, True) = []) then" + LineEnding;
  Result += "      if not DeleteDirectory(tmp, False) then" + LineEnding;
  Result += "        Exit;" + LineEnding;
  Result += "  end;" + LineEnding + LineEnding;
  Result += "  Result := not deleteRoot or DeleteDirectory(path, False);" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "procedure MoveFiles(origin, pkg: String);" + LineEnding;
  Result += "var" + LineEnding;
  Result += "  paths, files: TStringArray;" + LineEnding;
  Result += "  path, f, fPath, destination: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  paths := GetDirectories(origin + pkg + SEP);" + LineEnding;
  Result += "  if Length(paths) <> 1 then" + LineEnding;
  Result += "    TerminateScript('The ' + pkg + ' download is empty or has unexpected things inside.');" + LineEnding + LineEnding;
  Result += "  destination := IncludePath + pkg + SEP;" + LineEnding;
  Result += "  if DirectoryExists(destination) and not DelDirectory(destination) then" + LineEnding;
  Result += "    TerminateScript('Failed to delete old ' + pkg + ' library');" + LineEnding;
  Result += "  if not ForceDirectories(destination) then" + LineEnding;
  Result += "    TerminateScript('Failed to create path: ' + destination);" + LineEnding + LineEnding;
  Result += "  path := origin + pkg + SEP + paths[0] + SEP;" + LineEnding;
  Result += "  files := FindFiles(path, True);" + LineEnding + LineEnding;
  Result += "  for f in files do" + LineEnding;
  Result += "  begin" + LineEnding;
  Result += "    fPath := Replace(f, path, '', [rfReplaceAll]);" + LineEnding;
  Result += "    if Pos(SEP + '.git' + SEP, fPath) > 0 then" + LineEnding;
  Result += "      Continue;" + LineEnding + LineEnding;
  Result += "    if not ForceDirectories(destination + ExtractFilePath(fPath)) then" + LineEnding;
  Result += "      TerminateScript('Failed to create path: ' + destination + ExtractFilePath(fPath));" + LineEnding + LineEnding;
  Result += "    if not CopyFile(f, destination + fPath, False) then" + LineEnding;
  Result += "      TerminateScript('Failed to copy file: ' + fPath);" + LineEnding + LineEnding;
  Result += "    DeleteFile(f);" + LineEnding;
  Result += "    if (FindFiles(ExtractFilePath(f), True) = []) and (FindDirectories(ExtractFilePath(f), True) = []) then" + LineEnding;
  Result += "      DeleteDirectory(ExtractFilePath(f), False);" + LineEnding;
  Result += "  end;" + LineEnding + LineEnding;
  Result += "  DelDirectory(origin + pkg);" + LineEnding;
  Result += "end;" + LineEnding + LineEnding;
  Result += "var" + LineEnding;
  Result += "  pkg: String;" + LineEnding;
  Result += "begin" + LineEnding;
  Result += "  pkg := GetProcessParameter('pkg');" + LineEnding + LineEnding;
  Result += "  case LowerCase(pkg) of" + LineEnding;
  Result += "    'srl-t', 'srlt', 'srl': UnlockPlugins();" + LineEnding;
  Result += "  end;" + LineEnding + LineEnding;
  Result += "  WriteLn('[AsyncMover]: Moving ', pkg, ' files, this will take a few seconds.');" + LineEnding;
  Result += "  MoveFiles(GetProcessParameter('origin'), pkg);" + LineEnding;
  Result += "end;" + LineEnding + LineEnding + LineEnding;
  Result += "begin DeleteFile(ScriptFile); end;" + LineEnding;
end;

procedure TWaspUpdater.Update(pkg: String; caption, button: TComponent);
begin
  case pkg of
    'srlt':    Self.MonitorSRLT.RunMonitor(caption, button);
    'wasplib': Self.MonitorWL.RunMonitor(caption, button);
  end;
end;


function TWaspUpdater.GetScriptFileEx(filepath: String): TScriptFile;
var
  id, fileContent: String;
begin
  id := ExtractFileName(filepath).Before('.simba');
  if not id.IsUUID() then
    Exit;
  Result.ID := id;
  Result.Path := filepath;
  fileContent := ReadFileContents(filepath);
  Result.Revision := StrToIntDef(fileContent.After('SCRIPT_REVISION := ''').Before('''}'), 0);
end;

function TWaspUpdater.GetScriptFiles(): TScriptFileArray;
var
  files: TStringArray;
  i: Int32;
  script: TScriptFile;
begin
  if Self.Scripts <> [] then
    Exit(Self.Scripts);

  files := GetFiles(Self.ScriptsPath, 'simba');
  for i := 0 to High(files) do
  begin
    script := GetScriptFileEx(Self.ScriptsPath + files[i]);
    if script <> [] then
      Result += script;
  end;

  Self.Scripts := Result;
end;

function TWaspUpdater.GetScriptFile(id: String): TScriptFile;
var
  i: Int32;
  scripts: TScriptFileArray;
begin
  scripts := Self.GetScriptFiles();
  for i := 0 to High(scripts) do
    if id = scripts[i].ID then
      Exit(scripts[i]);
end;

procedure TWaspUpdater.UpdateScriptFileRevision(script: TScriptFile);
var
  i: Int32;
begin
  for i := 0 to High(Self.Scripts) do
    if Self.Scripts[i].ID = script.ID then
    begin
      Self.Scripts[i] := script;
      Exit;
    end;

  Self.Scripts += script;
end;

procedure TWaspUpdater.UpdateScript(script: TScriptData);
var
  files: TStringArray;
  fileName, path: String;
begin
  files := GetFiles(WaspClient.DownloadPath, 'simba');
  for fileName in files do
    DeleteFile(WaspClient.DownloadPath + fileName);

  if script = WaspClient.Cache.Launcher then
  begin
    if Self.UpdateAfterLogin then
      WaspClient.DownloadScript(script.ID, script.Revision)
    if not WaspClient.DownloadScriptEx(script.ID, script.Revision) then
      Exit;
  end
  else
    WaspClient.DownloadScript(script.ID, script.Revision);

  files := GetFiles(WaspClient.DownloadPath, 'simba');
  if Length(files) <> 1 then
    Exit;

  fileName := files[0];
  path := Self.ScriptsPath + fileName;
  if FileExists(path) and not DeleteFile(path) then
    TerminateScript('Failed to delete old script: ' + fileName);

  if not RenameFile(WaspClient.DownloadPath + fileName, path) then
  begin
    DeleteFile(WaspClient.DownloadPath + fileName);
    TerminateScript('Failed to move script: ' + fileName);
  end;

  Self.UpdateScriptFileRevision(Self.GetScriptFileEx(path));
end;


procedure TWaspUpdater.SelfUpdate();
begin
  Self.UpdateScript(WaspClient.Cache.Launcher);

  if FileExists(Self.ScriptsPath + Self.Launcher.ID + '.simba') then
  begin
    if FileExists(Self.Launcher.Path) and not DeleteFile(Self.Launcher.Path) then
      TerminateScript('Failed to delete old launcher.');

    if not CopyFile(Self.ScriptsPath + Self.Launcher.ID + '.simba', Self.Launcher.Path) then
      TerminateScript('Failed to copy updated launcher to it''s directory.');
  end;
end;

procedure TWaspUpdater.Free();
begin
  Self.MonitorSRLT.Timer.Free();
  Self.MonitorWL.Timer.Free();
end;

procedure TWaspUpdater.Setup();
begin
  Self.Name := 'WaspUpdater';
  Self.Launcher.ID := {$macro SCRIPT_ID};
  Self.Launcher.Revision := StrToIntDef({$macro SCRIPT_REVISION}, 1);

  Self.Launcher.Path := ScriptPath + 'wasp-launcher.simba';

  Self.ScriptsPath := ScriptPath + 'waspscripts.com' + DirectorySeparator;

  ForceDirectories(Self.ScriptsPath);

  Self.MonitorSRLT.Package := 'srl-t';
  Self.MonitorSRLT.Timer.Init(nil);
  Self.MonitorSRLT.Timer.setName('srlt_update_monitor');
  Self.MonitorSRLT.Timer.setInterval(200);

  Self.MonitorWL.Package := 'wasplib';
  Self.MonitorWL.Timer.Init(nil);
  Self.MonitorWL.Timer.setName('srlt_update_monitor');
  Self.MonitorWL.Timer.setInterval(200);

  AddOnTerminate(@Self.Free);
end;


function TWaspClient.Login(grantType: String; payload: TJSONObject): Boolean; override;
begin
  Result := inherited;
  WaspUpdater.UpdateAfterLogin := not Result;
end;


