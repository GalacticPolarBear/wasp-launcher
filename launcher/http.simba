(*
# HTTPClients
Responsible connecting to the internet.
*)

{$DEFINE WS_HTTP_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

var
  LauncherConfig: TConfigJSON;

type
  THTTPClient = record
    Name: String;
    Client: Int32;
    Server: String;
  end;

function THTTPClient.GetHTTPCode(): Int32;
begin
  Result := GetHTTPResponseCode(Self.Client);
end;

procedure THTTPClient.Free();
begin
  FreeHTTPClient(Self.Client);
end;

function THTTPClient.GET(route: String; verbose: Boolean = True): String;
var
  time: UInt64;
begin
  time := GetTickCount();
  Result := GetHTTPPage(Self.Client, Self.Server + route);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    {$IFNDEF DEVELOPER_MODE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - ' + Result + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ELSE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ENDIF}
end;

function THTTPClient.GETEx(route, destination: String; verbose: Boolean = True): Boolean;
var
  time: UInt64;
  response: String;
begin
  time := GetTickCount();
  response := GetHTTPPage(Self.Client, Self.Server + route);
  Result := (Self.GetHTTPCode() = 200) and WriteFileContents(destination, response, False);
  time := GetTickCount() - time;

  if verbose then
    {$IFNDEF DEVELOPER_MODE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - ' + ExtractFileName(destination) + ' - Download took: ' + ToStr(time) + 'ms.');
    {$ELSE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - Download took: ' + ToStr(time) + 'ms.');
    {$ENDIF}
end;

function THTTPClient.POST(route: String; verbose: Boolean = True): String;
var
  time: UInt64;
begin
  time := GetTickCount();
  ClearPostData(Self.Client);
  Result := PostHTTPPageEx(Self.Client, Self.Server + route);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    {$IFNDEF DEVELOPER_MODE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - ' + Result + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ELSE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ENDIF}
end;

function THTTPClient.POST(route: String; payload: String; verbose: Boolean = True): String; overload;
var
  time: UInt64;
begin
  time := GetTickCount();
  Result := PostHTTPPage(Self.Client, Self.Server + route, payload);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    {$IFNDEF DEVELOPER_MODE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - ' + Result + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ELSE}
    DebugLn(Self.Name, 'HTTPCode: ' + ToStr(Self.GetHTTPCode()) + ' - Response took: ' + ToStr(time) + 'ms.');
    {$ENDIF}
end;

function THTTPClient.POST(route: String; payload: TJSONObject; verbose: Boolean = True): String; overload;
begin
  Result := Self.POST(route, payload.toString(), verbose);
end;

(*
# GithubClient
Responsible for connecting to GitHub. Because of the way Simba HTTPClients work,
it's easier to have different clients for different servers when they use different headers.

Unaunthenticated requests to the GitHub API have a limit of 60 requests per hour per IP.
This should be more than enough for our use case since running this script should never really
do more than 3 (checking versions) or 6 (checking versions + downloading packages) requests per run.
*)
type
  TGitHubClient = record(THTTPClient)
    DownloadPath: String;
    Packages: record
      Current: record
        SRLT: String;
        WaspLib: String;
      end;
      Latest: record
        SRLT: String;
        WaspLib: String;
      end;
      Release: record
        SRLT: String;
        WaspLib: String;
      end;
    end;
  end;

procedure TGitHubClient.RefreshClient(isSetup: Boolean = True);
begin
  if isSetup then Self.Free();
  Self.Client := InitializeHTTPClient(True);

  SetHTTPContentType(Self.Client, 'application/json');
  SetHTTPHeader(Self.Client, 'Accept', 'application/vnd.github+json');
end;

function TGitHubClient.GetLatestPackage(pkg: String): TJSONObject;
const
  ROUTE: String = 'repos/Torwent/';
var
  response: String;
begin
  try
    response := Self.GET(ROUTE + pkg + '/releases/latest', {$IFDEF FULL_DEVELOPER_MODE}True{$ELSE}{$IFDEF DEVELOPER_MODE}True{$ELSE}False{$ENDIF}{$ENDIF});

    if Self.GetHTTPCode() = 200 then
      Result.Init(response);
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TGitHubClient.GetCurrentPackageVersion(pkg: String): String;
var
  path: String;
begin
  path := INCLUDEPATH + pkg + DIRECTORYSEPARATOR + 'CHANGELOG.md';

  Result := ReadFileContents(path);
  Result := Result.After('# [').Before('](https');
end;

procedure TGitHubClient.Setup();
var
  json: TJSONObject;
begin
  Self.Name := 'GitHub Client';
  Self.Server := 'https://api.github.com/';
  Self.DownloadPath := LAUNCHER_DATA + 'downloads' + DirectorySeparator;

  if not ForceDirectories(Self.DownloadPath) then
    TerminateScript('GitHubClient can''t create downloads directory.');

  Self.RefreshClient(False);
  AddOnTerminate(@Self.Free);

  Self.Packages.Current.SRLT := Self.GetCurrentPackageVersion('srl-t');
  Self.Packages.Current.WaspLib := Self.GetCurrentPackageVersion('wasplib');

  json := Self.GetLatestPackage('SRL-T');
  if json <> nil then
  begin
    Self.Packages.Latest.SRLT := json.getString('name').After('v');
    Self.Packages.Release.SRLT := json.getString('zipball_url');
    json.Free();
  end
  else
    Self.Packages.Latest.SRLT := 'failed';

  json := Self.GetLatestPackage('WaspLib');
  if json <> nil then
  begin
    Self.Packages.Latest.WaspLib := json.getString('name').After('v');
    Self.Packages.Release.WaspLib := json.getString('zipball_url');
    json.Free();
  end
  else
    Self.Packages.Latest.WaspLib := 'failed';
end;


procedure TGitHubClient.Download(pkg: String);
var
  url: String;
  params: TStringArray;
begin
  case LowerCase(pkg) of
    'srlt', 'srl-t': url := Self.Packages.Release.SRLT;
    'wl', 'wasplib': url := Self.Packages.Release.WaspLib;
    else
      TerminateScript('Unrecognized package to download: ' + pkg);
  end;

  params := ['url=' + url,'destination="'+ Self.DownloadPath + pkg + '.zip"', 'pkg=' + pkg];
  WaspAsync.Run('downloader', params);
end;


var
  GitHubClient: TGitHubClient;

(*
# WaspClient
Responsible for connecting to waspscripts.com database.
Because of the way Simba HTTPClients work, it's easier to have different clients
for different servers when they use different headers.
*)
type
  TRolesData = record
    Banned: Boolean;
    Premium: Boolean;
    VIP: Boolean;
    Tester: Boolean;
    Scripter: Boolean;
    Moderator: Boolean;
    Administrator: Boolean;
  end;

  TScriptData = record
    ID: String;
    Name: String;
    Description: String;
    Content: String;
    URL: String;
    Categories: TStringArray;
    Revision: Int32;
  end;

  TScriptDataArray = array of TScriptData;

  TBundleData = record
    ID: String;
    Product: String;
    Name: String;
    Owner: String;
    Scripts: TScriptDataArray;
  end;

  TBundleDataArray = array of TBundleData;

  TProductData = record
    ID: String;
    Owner: String;
    Bundle: String;
    Script: String;
  end;
  TProductDataArray = array of TProductData;

  TSubscriptionData = record
    Product: String;
    DateStart: String;
    DateEnd: String;
  end;
  TSubscriptionDataArray = array of TSubscriptionData;

function TScriptDataArray.Find(const id: String): Int32; constref;
begin
  for Result := 0 to High(Self) do
    if Self[Result].ID = id then
      Exit;
  Result := -1;
end;

function TScriptDataArray.Contains(const id: String): Boolean; constref;
begin
  Result := Self.Find(id) > -1;
end;

function ScriptDataSort(constref left, right: TScriptData): Int32;
begin
  if LowerCase(left.Name) > LowerCase(right.Name) then
    Exit(1);
  if LowerCase(left.Name) < LowerCase(right.Name) then
    Exit(-1);
end;

function TScriptDataArray.Sorted(): TScriptDataArray;
begin
  Result := System.Sorted(Self, @ScriptDataSort);
end;

type
  TWaspClient = record(THTTPClient)
    Schema: String;
    APIKey: String;
    DownloadPath: String;
    AssetsPath: String;

    Cache: record
      User: record
        AccessToken: String;
        RefreshToken: String;
        ID: String;
        Username: String;

        UserData: TJSONObject;
        Roles: TRolesData;
        Subscriptions: TSubscriptionDataArray;
        FreeAccess: TSubscriptionDataArray;
        SubscribbedProducts: TProductDataArray;
        FreeAccessProducts: TProductDataArray;
        SubscribbedScripts: TScriptDataArray;
        AllUserScripts: TScriptDataArray;
      end;

      Launcher: TScriptData;
      Scripts: TScriptDataArray;
      FreeScripts: TScriptDataArray;
      PremiumScripts: TScriptDataArray;

      Bundles: TBundleDataArray;
      Products: TProductDataArray;

      Free: Boolean;
    end;
  end;

procedure TWaspClient.FreeUserData();
begin
  if Self.Cache.Free then
    Exit;

  Self.Cache.User := [];
  Self.Cache.User.Roles := [];
  Self.Cache.User.SubscribbedProducts := [];
  Self.Cache.User.FreeAccessProducts := [];
  Self.Cache.User.SubscribbedScripts := [];
  Self.Cache.User.AllUserScripts := [];

  Self.Cache.User.UserData.Free();
  Self.Cache.User.UserData := nil;

  Self.Cache.Free := True;
end;

procedure TWaspClient.Free(); override;
begin
  FreeHTTPClient(Self.Client);
  Self.FreeUserData();
end;

(*
There's some bug that makes it required to "refresh" the client after logging in.
Oh Simba... you never stop surprising me.
*)
procedure TWaspClient.RefreshClient(isSetup: Boolean = True);
begin
  if isSetup then
    FreeHTTPClient(Self.Client);
  Self.Client := InitializeHTTPClient(True);

  SetHTTPContentType(Self.Client, 'application/json');
  SetHTTPHeader(Self.Client, 'apikey', Self.APIKey);
  if Self.Cache.User.AccessToken <> '' then
    SetHTTPHeader(Self.Client, 'Authorization', 'Bearer ' + Self.Cache.User.AccessToken);
end;

procedure TWaspClient.SaveRefreshToken();
begin
  if Self.Cache.User.RefreshToken <> '' then
    LauncherConfig.Put('refresh_token', Self.Cache.User.RefreshToken);
end;


//Login
function TWaspClient.Login(grantType: String; payload: TJSONObject): Boolean;
const
  ROUTE: String = 'auth/v1/token';
  QUERY: String = '?grant_type=';
var
  response: TJSONObject;
begin
  try
    response.Init(Self.POST(ROUTE + QUERY + grantType, payload, False));
    if Self.GetHTTPCode() = 200 then
    begin
      Self.Cache.User.AccessToken := response.getString('access_token');
      Self.Cache.User.RefreshToken := response.getString('refresh_token');
      Self.Cache.User.ID := response.getJSONObject('user').getString('id');
      Self.Cache.User.Username := response.getJSONObject('user').getJSONObject('user_metadata').getJSONObject('custom_claims').getString('global_name');
      Self.RefreshClient();
      Self.SaveRefreshToken();
      Self.Cache.Free := False;

      Self.GetAllUserScripts();
      Exit(True);
    end;

    Self.Cache.User := [];
    LauncherConfig.Remove('refresh_token');
    Self.FreeUserData();
  except
    WriteLn('Error logging in: ', GetExceptionMessage());
    if response <> nil then
      TerminateScript('Response: ' + response.ToString());
  finally
    payload.Free();
    if response <> nil then
      response.Free();
  end;
end;

function TWaspClient.Login(user, password: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('email', user);
  payload.Put('password', password);
  Result := Self.Login('password', payload);
end;

function TWaspClient.Login(refreshToken: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('refresh_token', refreshToken);
  Result := Self.Login('refresh_token', payload);
end;


function TWaspClient.GetUserData(): TJSONObject;
const
  ROUTE: String = 'auth/v1/user';
var
  response: String;
begin
  if Self.Cache.User.UserData <> nil then
    Exit(Self.Cache.User.UserData);

  try
    response := Self.GET(ROUTE, False);
    if Self.GetHTTPCode() = 200 then
    begin
      Result.Init(response);
      Self.Cache.User.UserData := Result;
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.Logout(): Boolean;
const
  ROUTE: String = 'auth/v1/logout';
begin
  try
    Self.POST(ROUTE, False);
    Result := Self.GetHTTPCode() = 204;
    if Result then
    begin
      Self.FreeUserData();
      LauncherConfig.Remove('refresh_token');
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.IsLoggedIn(): Boolean;
begin
  Result := Self.Cache.User.AccessToken <> '';
end;

procedure TWaspClient.LoadRefreshToken();
var
  token: String;
begin
  token := LauncherConfig.GetString('refresh_token');
  if (token <> '') then
  begin
    if Self.Login(token) then
      DebugLn(Self.Name, 'Previous session refreshed!')
    else
      Self.RefreshClient(True);
  end;
end;



procedure TWaspClient.SetSchema(schema: String);
begin
  if schema = 'public' then
    schema := ''; //public schema is just not having the header.

  if Self.Schema <> schema then
    SetHTTPHeader(Self.Client, 'Accept-Profile', schema);
end;


function TWaspClient.GetRoles(): TRolesData;
const
  ROUTE: String = 'rest/v1/roles';
var
  query: String = '?select=banned,premium,vip,tester,scripter,moderator,administrator';
  response: String;
  tmp: TJSONArray;
begin
  if Self.Cache.User.Roles <> [] then
    Exit(Self.Cache.User.Roles);

  Self.SetSchema('profiles');
  query += '&id=eq.' + Self.Cache.User.ID + '&limit=1';
  try
    response := Self.GET(ROUTE + query, False);
    if Self.GetHTTPCode() = 200 then
    begin
      tmp.Init(response);
      if tmp.length > 0 then
      begin
        Result.Banned := tmp.getJSONObject(0).getString('banned') = 'true';
        Result.Premium := tmp.getJSONObject(0).getString('premium') = 'true';
        Result.VIP := tmp.getJSONObject(0).getString('vip') = 'true';
        Result.Tester := tmp.getJSONObject(0).getString('tester') = 'true';
        Result.Scripter := tmp.getJSONObject(0).getString('scripter') = 'true';
        Result.Moderator := tmp.getJSONObject(0).getString('moderator') = 'true';
        Result.Administrator := tmp.getJSONObject(0).getString('administrator') = 'true';
        Self.Cache.User.Roles := Result;
      end;
      tmp.Free();
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.Select(schema, table, query: String; filters: TStringArray = []; orders: TStringArray = []): TJSONArray;
const
  ROUTE: String = 'rest/v1/';
var
  response: String;
begin
  Self.SetSchema(schema);

  if filters <> [] then
    query += '&' + Implode('&', filters);

  if orders <> [] then
    query += '&order=' + Implode('&order=', orders);

  try
    response := Self.GET(ROUTE + table + '?select=' + query, False);

    if Self.GetHTTPCode() = 200 then
      Result.Init(response);
  except
    TerminateScript(GetExceptionMessage());
  end;
end;


//You can try mess with what's below here but same checks are done on the database policies.
function TWaspClient.GetSubscriptions(): TSubscriptionDataArray;
var
  jsonArray: TJSONArray;
  i: Int32;
  sub: TSubscriptionData;
begin
  if Self.Cache.User.Subscriptions <> [] then
    Exit(Self.Cache.User.Subscriptions);
  jsonArray := Self.Select('profiles', 'subscription', 'product,date_start,date_end', ['id=eq.' + Self.Cache.User.ID]);

  for i := 0 to jsonArray.High() do
  begin
    with jsonArray.getJSONObject(i) do
    begin
      sub.Product := getString('product');
      sub.DateStart := getString('date_start');
      sub.DateEnd := getString('date_end');
    end;

    Result += sub;
  end;

  Self.Cache.User.Subscriptions := Result;
end;

function TWaspClient.GetFreeAccess(): TSubscriptionDataArray;
var
  jsonArray: TJSONArray;
  i: Int32;
  sub: TSubscriptionData;
begin
  if Self.Cache.User.FreeAccess <> [] then
    Exit(Self.Cache.User.FreeAccess);
  jsonArray := Self.Select('profiles', 'free_access', 'product,date_start,date_end', ['id=eq.' + Self.Cache.User.ID]);

  for i := 0 to jsonArray.High() do
  begin
    with jsonArray.getJSONObject(i) do
    begin
      sub.Product := getString('product');
      sub.DateStart := getString('date_start');
      sub.DateEnd := getString('date_end');
    end;

    Result += sub;
  end;

  Self.Cache.User.FreeAccess := Result;
end;


function TWaspClient.GetScripts(): TScriptDataArray;
  function _parseDate(fulldate: String): String;
  var
    time: String;
    yy, mm, dd: String;
  begin
    yy := fulldate.Before('-');
    mm := fulldate.After('-').Before('-');
    dd := fulldate.After('-').After('-').Before('T');
    time := fulldate.After('T').Before('.');

    Result := dd + '/' + mm + '/' + yy + ', ' + time;
  end;

var
  jsonArray, categories: TJSONArray;
  i, j: Int32;
  script: TScriptData;
begin
  if Self.Cache.Scripts <> [] then
    Exit(Self.Cache.Scripts);
  jsonArray := Self.Select(
                  'scripts',
                  'scripts',
                  'id,product,title,description,content,url,categories,protected!inner(revision,username,revision_date)',
                  ['published=eq.true'],
                  ['title.asc']
               );

  for i := 0 to jsonArray.High() do
  begin
    categories := jsonArray.getJSONObject(i).getJSONArray('categories');
    with jsonArray.getJSONObject(i) do
    begin
      script.ID := getString('id');
      script.Name := getString('title');
      script.Description := getString('description');
      script.Content := getString('content');
      script.URL := 'https://waspscripts.com/scripts/' + getString('url');
      script.Revision := getJSONObject('protected').getInt('revision');

      script.Content := script.Content.
                        Replace('{$id}', script.ID).
                        Replace('{$title}', script.Name).
                        Replace('{$description}', script.Description).
                        Replace('{$revision}', ToStr(script.Revision)).
                        Replace('{$author}', getJSONObject('protected').getString('username')).
                        Replace('{$revision_date}', _parseDate(getJSONObject('protected').getString('revision_date')).Before(',')).
                        Replace('{$last_revision_date}', _parseDate(getJSONObject('protected').getString('revision_date')).Before(',')).
                        Replace('{$last_revision_time}', _parseDate(getJSONObject('protected').getString('revision_date')).After(', ')).
                        Replace('{$last_revision_full_date}', _parseDate(getJSONObject('protected').getString('revision_date')));

      for j := 0 to categories.High() do
        script.Categories += categories.getString(j);
    end;

    if script.ID = {$MACRO SCRIPT_ID} then
      Self.Cache.Launcher := script
    else
      Result += script;
    script := [];
  end;

  jsonArray.Free();

  Self.Cache.Scripts := Result;
end;


function TWaspClient.GetFreeScripts(): TScriptDataArray;
var
  scripts: TScriptDataArray;
  i, j: Int32;
begin
  if Self.Cache.FreeScripts <> [] then
    Exit(Self.Cache.FreeScripts);

  scripts := Self.GetScripts();
  for i := 0 to High(scripts) do
    for j := 0 to High(scripts[i].Categories) do
      case scripts[i].Categories[j] of
        'Free':
        begin
          Result += scripts[i];
          Break;
        end;
        'Premium': Break;
      end;

  Self.Cache.FreeScripts := Result;
end;

function TWaspClient.GetPremiumScripts(): TScriptDataArray;
var
  scripts: TScriptDataArray;
  i, j: Int32;
begin
  if Self.Cache.PremiumScripts <> [] then
    Exit(Self.Cache.PremiumScripts);

  scripts := Self.GetScripts();
  for i := 0 to High(scripts) do
    for j := 0 to High(scripts[i].Categories) do
      case scripts[i].Categories[j] of
        'Premium':
        begin
          Result += scripts[i];
          Break;
        end;
        'Free': Break;
      end;
  Self.Cache.PremiumScripts := Result;
end;

function TWaspClient.GetBundles(): TBundleDataArray;
var
  jsonArray, scriptsJSON: TJSONArray;
  i, j, n: Int32;
  bundle: TBundleData;
  scripts: TScriptDataArray;
begin
  if Self.Cache.Bundles <> [] then
    Exit(Self.Cache.Bundles);
  jsonArray := Self.Select('scripts', 'bundles', 'product,id,name,scripts,user_id');

  scripts := Self.GetPremiumScripts();

  for i := 0 to jsonArray.High() do
    with jsonArray.getJSONObject(i) do
    begin
      bundle.ID := getString('id');
      bundle.Product := getString('product');
      bundle.Name := getString('name');
      bundle.Owner := getString('user_id');

      scriptsJSON := getJSONArray('scripts');
      for j := 0 to scriptsJSON.High() do
        for n := 0 to High(scripts) do
          if scripts[n].ID = scriptsJSON.getString(j) then
            bundle.Scripts += scripts[n];

      Result += bundle;
      bundle := [];
    end;

  jsonArray.Free();

  Self.Cache.Bundles := Result;
end;

function TWaspClient.GetBundledScripts(id: String): TScriptDataArray;
var
  bundles: TBundleDataArray;
  i: Int32;
begin
  bundles := Self.GetBundles();

  for i := 0 to High(bundles) do
  begin
    if bundles[i].ID <> id then
      Continue;

    Exit(bundles[i].Scripts);
  end;
end;


function TWaspClient.GetProducts(): TProductDataArray;
var
  jsonArray: TJSONArray;
  product: TProductData;
  i: Int32;
begin
  if Self.Cache.Products <> [] then
    Exit(Self.Cache.Products);
  jsonArray := Self.Select('scripts', 'products', 'id,user_id,bundle,script');

  for i := 0 to jsonArray.High() do
  begin
    with jsonArray.getJSONObject(i) do
    begin
      product.ID := getString('id');
      product.Owner := getString('user_id');
      product.Bundle := getString('bundle');
      product.Script := getString('script');
    end;
    Result += product;
  end;
  jsonArray.Free();

  Self.Cache.Products := Result;
end;


procedure TWaspClient.Setup();
var
  response: TJSONObject;
begin
  Self.Name := 'WaspClient';
  Self.Server := 'https://api.waspscripts.com/';
  Self.Client := InitializeHTTPClient(True);
  try
    response.Init(Self.GET('', False));
    Self.Server := response.getString('url');
    Self.APIKey := response.getString('anon_key');
  except
    WriteLn 'Failed to connect to https://api.waspscripts.com/ to get the database connection info.';
    WriteLn 'Falling back to previously known good values';
    Self.Server := 'https://db.waspscripts.com/';
    Self.APIKey := 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTcxOTQ5MDgwMCwiZXhwIjo0ODc1MTY0NDAwLCJyb2xlIjoiYW5vbiJ9.pKuuhYK-xxOWBHg3mqaxNptyvCpE5n-cjhxN3GQKr2I';
  finally
    FreeHTTPClient(Self.Client);
    response.Free();
  end;

  if Self.APIKey = '' then
    TerminateScript();

  if not Self.Server.EndsWith('/') then Self.Server += '/';

  Self.DownloadPath := LAUNCHER_DATA + 'downloads' + DirectorySeparator;
  Self.AssetsPath := LAUNCHER_DATA + 'assets' + DirectorySeparator;

  if not ForceDirectories(Self.DownloadPath) then
    TerminateScript('WaspClient can''t create downloads directory.');

  Self.RefreshClient(False);
  AddOnTerminate(@Self.Free);
  Self.LoadRefreshToken();

  //Pre-load data...
  Self.GetProducts();
  Self.GetBundles();
  Self.GetFreeScripts();
end;


function TWaspClient.GetSubscribbedProducts(): TProductDataArray;
var
  subs: TSubscriptionDataArray;
  products: TProductDataArray;
  i, j: Int32;
begin
  if Self.Cache.User.SubscribbedProducts <> [] then
    Exit(Self.Cache.User.SubscribbedProducts);

  subs := Self.GetSubscriptions();
  products := Self.GetProducts();

  for i := 0 to High(subs) do
    for j := High(products) downto 0 do
    begin
      if subs[i].Product <> products[j].ID then
        Continue;
      Result += products[j];
      Delete(products, j, 1);
      Break;
    end;

  Self.Cache.User.SubscribbedProducts := Result;
end;

function TWaspClient.GetFreeAccessProducts(): TProductDataArray;
var
  free: TSubscriptionDataArray;
  products: TProductDataArray;
  roles: TRolesData;
  i, j: Int32;
begin
  if Self.Cache.User.FreeAccessProducts <> [] then
    Exit(Self.Cache.User.FreeAccessProducts);

  free := Self.GetFreeAccess();
  products := Self.GetProducts();
  roles := Self.GetRoles();

  for i := 0 to High(free) do
    for j := High(products) downto 0 do
    begin
      if free[i].Product <> products[j].ID then
        Continue;
      Result += products[j];
      Delete(products, j, 1);
      Break;
    end;

  if roles.Tester or roles.Moderator or roles.Administrator then
    for i := 0 to High(products) do
      Result += products[i];

  Self.Cache.User.FreeAccessProducts := Result;
end;


function TWaspClient.GetAccessScripts(): TScriptDataArray;
var
  subs, freeAccess: TProductDataArray;
  scripts, bundled: TScriptDataArray;
  i, j: Int32;
begin
  if Self.Cache.User.SubscribbedScripts <> [] then
    Exit(Self.Cache.User.SubscribbedScripts);

  scripts := Self.GetPremiumScripts();
  subs := Self.GetSubscribbedProducts();
  freeAccess := Self.GetFreeAccessProducts();

  for i := 0 to High(subs) do
  begin
    if subs[i].Script = 'null' then
    begin
      bundled := Self.GetBundledScripts(subs[i].Bundle);
      for j := 0 to High(bundled) do
        if not Result.Contains(bundled[j].ID) then
          Result += bundled[j];
    end;

    for j := 0 to High(scripts) do
    begin
      if scripts[j].ID <> subs[i].Script then
        Continue;

      if not Result.Contains(scripts[j].ID) then
        Result += scripts[j];
    end;
  end;

  for i := 0 to High(freeAccess) do
  begin
    if freeAccess[i].Script = 'null' then
    begin
      bundled := Self.GetBundledScripts(freeAccess[i].Bundle);

      for j := 0 to High(bundled) do
        if not Result.Contains(bundled[j].ID) then
          Result += bundled[j];
    end;

    for j := 0 to High(scripts) do
    begin
      if scripts[j].ID <> freeAccess[i].Script then
        Continue;
      if not Result.Contains(scripts[j].ID) then
        Result += scripts[j];
    end;
  end;

  Self.Cache.User.SubscribbedScripts := Result;
end;

function TWaspClient.GetAllUserScripts(): TScriptDataArray;
begin
  if Self.Cache.User.AllUserScripts <> [] then
    Exit(Self.Cache.User.AllUserScripts);

  Result := Self.GetAccessScripts() + Self.GetFreeScripts();
  Result := Result.Sorted();

  Self.Cache.User.AllUserScripts := Result;
end;


function TWaspClient.Storage(route: String): String;
var
  response: String;
begin
  try
    response := Self.GET(route, False);
    if Self.GetHTTPCode() = 200 then
      Result := response;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.Storage(bucket, path: String): String; overload;
const
  ROUTE: String = 'storage/v1/object/authenticated/';
begin
  Result := Self.Storage(ROUTE + bucket + '/' + path);
end;

function TWaspClient.StorageGetSignedURL(bucket, path: String; expiresIn: UInt32 = 10): String;
const
  ROUTE: String = 'storage/v1/object/sign/';
var
  response: String;
  payload, json: TJSONObject;
begin
  payload.Init();
  payload.Put('expiresIn', expiresIn);

  try
    response := Self.POST(ROUTE + bucket + '/' + path, payload, False);
    if Self.GetHTTPCode() = 200 then
    begin
     json.Init(response);
     Result := 'storage/v1' + json.getString('signedURL');
     json.Free();
    end;
  except
    TerminateScript(GetExceptionMessage());
  finally
    payload.Free();
  end;
end;


procedure TWaspClient.DownloadScript(id: String; revision: Int32);
const
  ROUTE: String = 'storage/v1/object/authenticated/scripts/';
var
  url, revStr: String;
begin
  revStr := PadL(ToStr(revision), 9, '0');
  url := ROUTE + id + '/' + revStr + '/script.simba';
  DebugLn(Self.Name, 'Downloading ' + id + ' rev. ' + ToStr(revision) + ' this might take a while.');
  if not Self.GETEx(url, Self.DownloadPath + id + '.simba') then
    TerminateScript('Something went wrong while trying to download: ' + url);
end;

function TWaspClient.DownloadScriptEx(id: String; revision: Int32): Boolean;
const
  ROUTE: String = 'storage/v1/object/public/scripts/';
var
  url, revStr: String;
begin
  revStr := PadL(ToStr(revision), 9, '0');
  url := ROUTE + id + '/' + revStr + '/script.simba';

  DebugLn(Self.Name, 'Downloading ' + id + ' this might take a while.');
  Result := Self.GETEx(url, Self.DownloadPath + id + '.simba');
end;


procedure TWaspClient.DownloadImage(id, img: String);
const
  ROUTE: String = 'storage/v1/object/authenticated/imgs/scripts/';
var
  url: String;
  path: String;
begin
  url := ROUTE + id + '/' + img + '.jpg';

  path := Self.AssetsPath + id + DirectorySeparator;
  if not ForceDirectories(path) then
    TerminateScript('Failed to create assets path: ' + id);

  if not Self.GETEx(url, path + img + '.jpg') then
  begin
    url := ROUTE + 'default/' + img + '.jpg';
    if not Self.GETEx(url, path + img + '.jpg') then
      TerminateScript('Something went wrong while trying to download: ' + url);
  end;
end;


procedure TWaspClient.RunTests(user, password: String);
begin
  if Self.Cache.User.AccessToken = '' then
    Self.Login(user, password);

  WriteLn('UserData: ', Self.GetUserData().ToString());
  WriteLn('Roles:', Self.GetRoles());
  WriteLn('Subscription:', Self.GetSubscriptions());
  WriteLn('FreeAccess:', Self.GetFreeAccess());
  WriteLn('Scripts:', Self.GetScripts());
  WriteLn('Bundles:', Self.GetBundles());
  WriteLn('Products:', Self.GetProducts());
  WriteLn('SubbedProducts:', Self.GetSubscribbedProducts());
  WriteLn('BundledScripts:', Self.GetBundledScripts('86a1dbfc-338d-4c98-87c7-29b875549d9b'));
  WriteLn('SubbedScripts:', Self.GetAccessScripts());
end;

var
  WaspClient: TWaspClient;
