(*
# S2SCompiler
A "Simba to Simba compiler" that compiles multiple scripts into a single one.
This is a very basic script and won't understand things like
"IF" compiler directives.

- `FILE_NAME` is the base file name you want to compile.
- `PATH` is the path to `FILE_NAME`
- `ERASE_DIRECTIVE_REGEX` is a regex for the lines you want this to ignore when "compiling" your script.
  This is because if you have multiple files including the same file, you will get stuck in a recursive loop.
  Should be easy to modify this to use simple strings instead of regex.

The final result will be placed along thing script with `FILE_NAME` or if
`FILE_NAME` is in the same directory, it will be named:
```pascal
FILE_NAME.Replace('.simba', '-compiled.simba')
```
*)
{$I SRL-T/osr.simba}

const
  FILE_NAME: String = 'launcher.simba';
  PATH: String = {$macro CURRENT_DIRECTORY} + 'launcher' + DirectorySeparator;
  ERASE_DIRECTIVE_REGEX: TStringArray = [
    '\{\$IFNDEF WS_LAUNCHER\}([\s\S]*?\{\$ENDIF\})',
    '\{\$IFNDEF SRL_OSR\}([\s\S]*?\{\$ENDIF\})',
    '\{\$IFNDEF SRL_UTILS\}([\s\S]*?\{\$ENDIF\})',
    '\{\$IFNDEF WL_OSR\}([\s\S]*?\{\$ENDIF\})',
    '\{\$IFNDEF WL_UTILS\}([\s\S]*?\{\$ENDIF\})'
  ];

const INCLUDE_DIRECTIVES: TStringArray = ['{$I ', '{$INCLUDE', '{$i ', '$include'];

function GetDirectiveIndex(content: String): Int32;
begin
  for Result := 0 to High(INCLUDE_DIRECTIVES) do
    if content.Contains(INCLUDE_DIRECTIVES[Result]) then
      Exit;
  Result := -1;
end;

function GetIncludeContent(content: String; directiveIndex: Int32): String;
var
  filePath, regex: String;
begin
  filePath := content.After(INCLUDE_DIRECTIVES[directiveIndex]).Before('}');

  if filePath.StartsWith('WaspLib') or filePath.StartsWith('SRL-T') then
    Result := ReadFileContents(IncludePath + filePath)
  else
    Result := ReadFileContents(PATH + filePath);

  for regex in ERASE_DIRECTIVE_REGEX do
    Result := ReplaceRegExpr(regex, Result, '', True);

  filePath := ExtractFilePath(PATH + filePath).Replace(AppPath, "AppPath + '") + "'";
  filePath := filePath.Replace(DirectorySeparator, "' + DirectorySeparator + '");
  filePath := filePath.Replace(" + ''", '');

  Result := Result.Replace('{$macro CURRENT_DIRECTORY}', filePath);
  Result := Result.Replace('{$MACRO CURRENT_DIRECTORY}', filePath);

  Result := LineEnding + Result + LineEnding;
end;

function ReplaceIncludeDirective(content, sub: String; directiveIndex: Int32): String;
var
  directive: String;
begin
  directive := content.After(INCLUDE_DIRECTIVES[directiveIndex]).Before('}');
  directive := INCLUDE_DIRECTIVES[directiveIndex] + directive + '}';
  Result := content.Replace(directive, sub);
end;

var
  content, sub: String;
  index: Int32;
begin
  content := ReadFileContents(PATH + FILE_NAME);

  index := GetDirectiveIndex(content);
  while index > -1 do
  begin
    sub := GetIncludeContent(content, index);
    content := ReplaceIncludeDirective(content, sub, index);
    index := GetDirectiveIndex(content);
  end;

  if PATH = {$macro CURRENT_DIRECTORY} then
    WriteFileContents(PATH + FILE_NAME.Replace('.simba', '-compiled.simba'), content, False)
  else
    WriteFileContents({$macro CURRENT_DIRECTORY} + FILE_NAME, content, False);
end;
