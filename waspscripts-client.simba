(*
Helper methods
*)
procedure TerminateScript(reason: String); overload;
begin
  WriteLn('Terminating: ' + reason);
  TerminateScript();
end;

function TimeStamp(): String;
var
  Time: Int64;
  Hours, Mins, Secs, Millis: Int32;
begin
  Time := GetTimeRunning();

  Hours  := Time div 3600000;
  Time   := Time mod 3600000;
  Mins   := Time div 60000;
  Time   := Time mod 60000;
  Secs   := Time div 1000;
  Millis := Time mod 1000;

  Result := Format('[%.2d:%.2d:%.2d:%.3d]', [Hours, Mins, Secs, Millis]);
end;

function String.IsEmail(): Boolean;
const
  REGEX: String = '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$';
begin
  Result := ExecRegExpr(REGEX, System.Trim(Self));
end;

function String.Contains(subString: String): Boolean;
begin
  Result := System.Pos(subString, Self) > 0;
end;

function String.Before(SubStr: String): String; constref;
var
  p: UInt32;
begin
  p := System.Pos(SubStr, Self);
  if (p = 0) then Exit(Self);
  Result := Copy(Self, 1, p - 1);
end;

procedure FreeJSONObject(json: TZAbstractObject);
begin
  if json <> nil then
  begin
    json.Free();
    json := nil;
  end;
end;

function TJSONArray.High(): Int32;
begin
  Result := Self.length()-1;
end;

(*
# WaspConfig
Responsible for loading settings from and saving them in json format.
*)
type
  TWaspConfig = record
    ConfigPath: String;
    JSON: TJSONObject;
  end;

function TWaspConfig.GetConfig(): TJSONObject;
var
  str: String;
begin
  if FileExists(Self.ConfigPath) then
  begin
    str := ReadFileContents(Self.ConfigPath);
    if str <> '' then
    begin
      Result.Init(str);
      Exit;
    end;
  end;

  Result.Init();
end;

procedure TWaspConfig.Setup();
begin
  Self.ConfigPath := AppPath + 'Data' + DirectorySeparator + 'WaspLib' + DirectorySeparator + 'configs' + DirectorySeparator;
  if not ForceDirectories(Self.ConfigPath) then
    TerminateScript('Can''t create configs directory.');

  Self.ConfigPath += 'launcher.json';

  Self.JSON := Self.GetConfig();
  AddOnTerminate(@Self.JSON.Free);
end;

procedure TWaspConfig.SaveConfig();
begin
  if Self.JSON = nil then
    Self.Setup();
  if not WriteFileContents(Self.ConfigPath, json.toString(), False) then
    TerminateScript('Failed to save config.');
end;

procedure TWaspConfig.Put(key, value: String);
begin
  if Self.JSON = nil then
    Self.Setup();
  Self.JSON.Put(key, value);
  Self.SaveConfig();
end;

function TWaspConfig.Get(key: String): String;
begin
  if Self.JSON = nil then
    Self.Setup();
  if Self.JSON.has(key) then
    Result := Self.JSON.getString(key);
end;

procedure TWaspConfig.Remove(key: String);
begin
  if Self.JSON = nil then
    Self.Setup();
  Self.JSON.remove(key);
  Self.SaveConfig();
end;

var
  WaspConfig: TWaspConfig;

(*
# WaspClient
Responsible for speaking with https://db.waspscripts.com/
*)
type
  TRolesData = record
    Banned: Boolean;
    Premium: Boolean;
    VIP: Boolean;
    Tester: Boolean;
    Scripter: Boolean;
    Moderator: Boolean;
    Administrator: Boolean;
  end;

  TScriptData = record
    ID: String;
    Title: String;
    URL: String;
    Categories: TStringArray;
  end;
  TScriptDataArray = array of TScriptData;

  TProductData = record
    ID: String;
    Owner: String;
    Bundle: String;
    Script: String;
  end;
  TProductDataArray = array of TProductData;

  TWaspClient = record
    Client: Int32;
    Schema: String;
    Server: String;
    APIKey: String;
    User: record
      AccessToken: String;
      RefreshToken: String;
      ID: String;
      Username: String;
    end;

    Cache: record
      User: TJSONObject;
      Roles: TRolesData;
      Subscriptions: TJSONArray;
      FreeAccess: TJSONArray;

      Scripts: TJSONArray;
      FreeScripts: TScriptDataArray;
      PremiumScripts: TScriptDataArray;

      Bundles: TJSONArray;
      //BundledScripts: array [String] of TJSONArray;

      Products: TJSONArray;
      SubscribbedProducts: TProductDataArray;
      FreeAccessProducts: TProductDataArray;
      SubscribbedScripts: TScriptDataArray;
    end;
  end;

function TScriptDataArray.Contains(id: String): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i].ID = id then
      Exit(True);
end;

procedure TWaspClient.DebugLn(text: String); constref;
begin
  WriteLn(TimeStamp() + ':[WaspClient]: ' + text);
end;

procedure TWaspClient.FreeCache();
begin
  FreeJSONObject(Self.Cache.User);
  FreeJSONObject(Self.Cache.Scripts);
  FreeJSONObject(Self.Cache.Bundles);
  FreeJSONObject(Self.Cache.FreeAccess);
  FreeJSONObject(Self.Cache.Subscriptions);
  FreeJSONObject(Self.Cache.Products);
end;

procedure TWaspClient.Free();
begin
  FreeHTTPClient(Self.Client);
  Self.FreeCache();
end;

(*
There's some bug that makes it required to "refresh" the client after logging in.
Oh Simba... you never stop surprising me.
*)
procedure TWaspClient.RefreshClient(isSetup: Boolean = True);
begin
  if isSetup then
    FreeHTTPClient(Self.Client);
  Self.Client := InitializeHTTPClient(True);

  SetHTTPContentType(Self.Client, 'application/json');
  SetHTTPHeader(Self.Client, 'apikey', Self.APIKey);
  if Self.User.AccessToken <> '' then
    SetHTTPHeader(sELF.Client, 'Authorization', 'Bearer ' + Self.User.AccessToken);
end;


function TWaspClient.GetHTTPCode(): Int32;
begin
  Result := GetHTTPResponseCode(Self.Client);
end;

function TWaspClient.GET(route: String; verbose: Boolean = True): String;
var
  time: UInt64;
begin
  time := GetTickCount();
  Result := GetHTTPPage(Self.Client, Self.Server + route);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    Self.DebugLn(Result + ' - Response took: ' + ToStr(time) + 'ms.');
end;

function TWaspClient.POST(route: String; verbose: Boolean = True): String;
var
  time: UInt64;
begin
  time := GetTickCount();
  ClearPostData(Self.Client);
  Result := PostHTTPPageEx(Self.Client, Self.Server + route);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    Self.DebugLn(Result + ' - Response took: ' + ToStr(time) + 'ms.');
end;

function TWaspClient.POST(route: String; payload: String; verbose: Boolean = True): String; overload;
var
  time: UInt64;
begin
  time := GetTickCount();
  Result := PostHTTPPage(Self.Client, Self.Server + route, payload);
  time := GetTickCount() - time;
  Result := StringReplace(Result, '\u0020', ' ', [rfReplaceAll]);
  if verbose then
    Self.DebugLn(Result + ' - Response took: ' + ToStr(time) + 'ms.');
end;

function TWaspClient.POST(route: String; payload: TJSONObject; verbose: Boolean = True): String; overload;
begin
  Result := Self.POST(route, payload.toString(), verbose);
end;


procedure TWaspClient.SaveRefreshToken();
begin
  if Self.User.RefreshToken <> '' then
    WaspConfig.Put('refresh_token', Self.User.RefreshToken);
end;


function TWaspClient.Login(grantType: String; payload: TJSONObject): Boolean;
const
  ROUTE: String = 'auth/v1/token';
  QUERY: String = '?grant_type=';
var
  response: TJSONObject;
begin
  try
    response.Init(Self.POST(ROUTE + QUERY + grantType, payload, False));

    Result := Self.GetHTTPCode() = 200;
    if Result then
    begin
      Self.User.AccessToken := response.getString('access_token');
      Self.User.RefreshToken := response.getString('refresh_token');
      Self.User.ID := response.getJSONObject('user').getString('id');
      Self.User.Username := response.getJSONObject('user').getJSONObject('user_metadata').getJSONObject('custom_claims').getString('global_name');
      Self.RefreshClient();
      Self.SaveRefreshToken();
    end
    else if not Result then
    begin
      Self.User := [];
      WaspConfig.Remove('refresh_token');
    end;
  except
    TerminateScript(response.ToString() + LineEnding + GetExceptionMessage());
  finally
    payload.Free();
    response.Free();
  end;
end;

function TWaspClient.Login(user, password: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('email', user);
  payload.Put('password', password);
  Result := Self.Login('password', payload);
end;

function TWaspClient.Login(refreshToken: String): Boolean; overload;
var
  payload: TJSONObject;
begin
  payload.Init();
  payload.Put('refresh_token', refreshToken);
  Result := Self.Login('refresh_token', payload);
end;

function TWaspClient.GetUser(): TJSONObject;
const
  ROUTE: String = 'auth/v1/user';
var
  response: String;
begin
  if Self.Cache.User <> nil then
    Exit(Self.Cache.User);

  try
    response := Self.GET(ROUTE, False);
    if Self.GetHTTPCode() = 200 then
    begin
      Result.Init(response);
      Self.Cache.User := Result;
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.Logout(): Boolean;
const
  ROUTE: String = 'auth/v1/logout';
begin
  try
    Self.POST(ROUTE, False);
    Result := Self.GetHTTPCode() = 204;
    if Result then
    begin
      Self.User := [];
      Self.FreeCache();
      WaspConfig.Remove('refresh_token');
    end;
  except
    TerminateScript(GetExceptionMessage());
  end;
end;

function TWaspClient.IsLoggedIn(): Boolean;
begin
  Result := Self.User.AccessToken <> '';
end;

procedure TWaspClient.LoadRefreshToken();
var
  token: String;
begin
  token := WaspConfig.Get('refresh_token');
  if (token <> '') and Self.Login(token) then
    DebugLn('Previous session refreshed!');
end;

procedure TWaspClient.Setup();
begin
  Self.Server := 'https://db.waspscripts.com/';
  Self.APIKey := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVucWxwY2hvYm5peWx3cHNqY3FjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjM5MzIxMDAsImV4cCI6MTk3OTUwODEwMH0.WUiK6CteSjnOT8A9AcbUHnYyvWwDxlwUwq_ueifPAxY';
  Self.RefreshClient(False);
  AddOnTerminate(@Self.Free);
  Self.LoadRefreshToken();
end;


procedure TWaspClient.SetSchema(schema: String);
begin
  if schema = 'public' then
    schema := ''; //public schema is just not having the header.

  if Self.Schema <> schema then
    SetHTTPHeader(Self.Client, 'Accept-Profile', schema);
end;


function TWaspClient.GetRoles(): TRolesData;
const
  ROUTE: String = 'rest/v1/roles';
var
  query: String = '?select=banned,premium,vip,tester,scripter,moderator,administrator';
  response: String;
  tmp: TJSONArray;
begin
  if Self.Cache.Roles <> [] then
    Exit(Self.Cache.Roles);

  Self.SetSchema('profiles');
  query += '&id=eq.' + Self.User.ID + '&limit=1';
  try
    response := Self.GET(ROUTE + query, False);
    if Self.GetHTTPCode() = 200 then
    begin
      tmp.Init(response);
      if tmp.length > 0 then
      begin
        Result.Banned := tmp.getJSONObject(0).getString('banned') = 'true';
        Result.Premium := tmp.getJSONObject(0).getString('premium') = 'true';
        Result.VIP := tmp.getJSONObject(0).getString('vip') = 'true';
        Result.Tester := tmp.getJSONObject(0).getString('tester') = 'true';
        Result.Scripter := tmp.getJSONObject(0).getString('scripter') = 'true';
        Result.Moderator := tmp.getJSONObject(0).getString('moderator') = 'true';
        Result.Administrator := tmp.getJSONObject(0).getString('administrator') = 'true';
        Self.Cache.Roles := Result;
      end;
    end;
  except
    TerminateScript(GetExceptionMessage());
  finally
    tmp.Free();
  end;
end;


function TWaspClient.Select(schema, table, query: String; filters: TStringArray = []): TJSONArray;
const
  ROUTE: String = 'rest/v1/';
var
  response: String;
begin
  Self.SetSchema(schema);

  if filters <> [] then
    query += '&' + Implode('&', filters);
  try
    response := Self.GET(ROUTE + table + '?select=' + query, False);
    if Self.GetHTTPCode() = 200 then
      Result.Init(response);
  except
    TerminateScript(GetExceptionMessage());
  end;
end;


//You can try mess with what's below here but same checks are done on the database policies.
function TWaspClient.GetSubscriptions(): TJSONArray;
begin
  if Self.Cache.Subscriptions <> nil then
    Exit(Self.Cache.Subscriptions);
  Result := Self.Select('profiles', 'subscription', 'product,date_start,date_end', ['id=eq.' + Self.User.ID]);
  Self.Cache.Subscriptions := Result;
end;

function TWaspClient.GetFreeAccess(): TJSONArray;
begin
  if Self.Cache.FreeAccess <> nil then
    Exit(Self.Cache.FreeAccess);
  Result := Self.Select('profiles', 'free_access', 'product,date_start,date_end', ['id=eq.' + Self.User.ID]);
  Self.Cache.FreeAccess := Result;
end;


function TWaspClient.GetScripts(): TJSONArray;
begin
  if Self.Cache.Scripts <> nil then
    Exit(Self.Cache.Scripts);
  Result := Self.Select('scripts', 'scripts', 'id,product,title,url,categories');
  Self.Cache.Scripts := Result;
end;

function TWaspClient.GetFreeScripts(): TScriptDataArray;
var
  scripts, categories: TJSONArray;
  i, j: Int32;
  script: TScriptData;
begin
  if Self.Cache.FreeScripts <> [] then
    Exit(Self.Cache.FreeScripts);

  scripts := Self.GetScripts();
  for i := 0 to scripts.High() do
  begin
    categories := scripts.getJSONObject(i).getJSONArray('categories');
    for j := 0 to categories.High() do
      case categories.getString(j) of
        'Free':
        begin
          with scripts.getJSONObject(i) do
          begin
            script.ID := getString('id');
            script.Title := getString('title');
            script.URL := 'https://waspscripts.com/scripts/' + getString('url');
            for j := 0 to categories.High() do
              script.Categories += categories.getString(j);
          end;

          Result += script;
          script := [];
          Break;
        end;
        'Premium': Break;
      end;
  end;
  Self.Cache.FreeScripts := Result;
end;

function TWaspClient.GetPremiumScripts(): TScriptDataArray;
var
  scripts, categories: TJSONArray;
  i, j: Int32;
  script: TScriptData
begin
  if Self.Cache.PremiumScripts <> [] then
    Exit(Self.Cache.PremiumScripts);

  scripts := Self.GetScripts();
  for i := 0 to scripts.High() do
  begin
    categories := scripts.getJSONObject(i).getJSONArray('categories');
    for j := 0 to categories.High() do
      case categories.getString(j) of
        'Premium':
        begin
          with scripts.getJSONObject(i) do
          begin
            script.ID := getString('id');
            script.Title := getString('title');
            script.URL := 'https://waspscripts.com/scripts/' + getString('url');
            for j := 0 to categories.High() do
              script.Categories += categories.getString(j);
          end;

          Result += script;
          script := [];
          Break;
        end;
        'Free': Break;
      end;
  end;
  Self.Cache.PremiumScripts := Result;
end;


function TWaspClient.GetBundles(): TJSONArray;
begin
  if Self.Cache.Bundles <> nil then
    Exit(Self.Cache.Bundles);
  Result := Self.Select('scripts', 'bundles', 'product,id,name,scripts,user_id');
  Self.Cache.Bundles := Result;
end;

function TWaspClient.GetBundledScripts(id: String): TScriptDataArray;
var
  bundles, bundled: TJSONArray;
  scripts: TScriptDataArray;
  i, j: Int32;
begin
  bundles := Self.GetBundles();
  for i := 0 to bundles.High() do
  begin
    if bundles.getJSONObject(i).GetString('id') <> id then
      Continue;

    bundled := bundles.getJSONObject(i).getJSONArray('scripts');
    Break;
  end;

  if bundled = nil then
    Exit;

  scripts := Self.GetPremiumScripts();

  for i := 0 to High(scripts) do
  begin
    for j := 0 to bundled.High() do
    begin
      if scripts[i].ID <> bundled.getString(j) then
        Continue;
      Result += scripts[i];
    end;
  end;
end;


function TWaspClient.GetProducts(): TJSONArray;
begin
  if Self.Cache.Products <> nil then
    Exit(Self.Cache.Products);
  Result := Self.Select('scripts', 'products', 'id,user_id,bundle,script');
  Self.Cache.Products := Result;
end;


function TWaspClient.GetSubscribbedProducts(): TProductDataArray;
var
  subs, products: TJSONArray;
  roles: TRolesData;
  i, j: Int32;
  product: TProductData;
begin
  if Self.Cache.SubscribbedProducts <> [] then
    Exit(Self.Cache.SubscribbedProducts);

  subs := Self.GetSubscriptions();
  products := Self.GetProducts();
  roles := Self.GetRoles();

  for i := 0 to subs.High() do
  begin
    for j := 0 to products.High() do
    begin
      if subs.getJSONObject(i).getString('product') <> products.getJSONObject(j).getString('id') then
        if products.getJSONObject(j).getString('user_id') <> Self.User.ID then
          if not roles.Tester or not roles.Moderator or not roles.Administrator then
            Continue;

      with products.getJSONObject(j) do
      begin
        product.ID := getString('id');
        product.Owner := getString('user_id');
        product.Bundle := getString('bundle');
        product.Script := getString('script');
      end;

      Result += product;
    end;
  end;
  Self.Cache.SubscribbedProducts := Result;
end;

function TWaspClient.GetFreeAccessProducts(): TProductDataArray;
var
  access, products: TJSONArray;
  i, j: Int32;
  product: TProductData;
begin
  if Self.Cache.FreeAccessProducts <> [] then
    Exit(Self.Cache.FreeAccessProducts);

  access := Self.GetFreeAccess();
  products := Self.GetProducts();

  for i := 0 to access.High() do
  begin
    for j := 0 to products.High() do
    begin
      if access.getJSONObject(i).getString('product') <> products.getJSONObject(j).getString('id') then
        Continue;

      with products.getJSONObject(j) do
      begin
        product.ID := getString('id');
        product.Owner := getString('user_id');
        product.Bundle := getString('bundle');
        product.Script := getString('script');
      end;

      Result += product;
    end;
  end;
  Self.Cache.FreeAccessProducts := Result;
end;


function TWaspClient.GetSubscribbedScripts(): TScriptDataArray;
var
  subs, freeAccess: TProductDataArray;
  scripts, bundled: TScriptDataArray;
  i, j: Int32;
begin
  if Self.Cache.SubscribbedScripts <> [] then
    Exit(Self.Cache.SubscribbedScripts);

  scripts := Self.GetPremiumScripts();
  subs := Self.GetSubscribbedProducts();
  freeAccess := Self.GetFreeAccessProducts();

  for i := 0 to High(subs) do
  begin
    if subs[i].Script = 'null' then
    begin
      bundled := Self.GetBundledScripts(subs[i].Bundle);
      for j := 0 to High(bundled) do
        if not Result.Contains(bundled[j].ID) then
          Result += bundled[j];
    end;

    for j := 0 to High(scripts) do
    begin
      if scripts[j].ID <> subs[i].Script then
        Continue;

      if not Result.Contains(scripts[j].ID) then
        Result += scripts[j];
    end;
  end;

  for i := 0 to High(freeAccess) do
  begin
    if freeAccess[i].Script = 'null' then
    begin
      bundled := Self.GetBundledScripts(freeAccess[i].Bundle);
      for j := 0 to High(bundled) do
        if not Result.Contains(bundled[j].ID) then
          Result += bundled[j];
    end;

    for j := 0 to High(scripts) do
    begin
      if scripts[i].ID <> freeAccess[i].Script then
        Continue;
      if not Result.Contains(scripts[i].ID) then
        Result += scripts[i];
    end;
  end;
  Self.Cache.SubscribbedScripts := Result;
end;


procedure TWaspClient.RunTests(user, password: String);
var
  json: TJSONObject;
  jsonArray: TJSONArray;
begin
  if Self.User.AccessToken = '' then
    Self.Login(user, password);

  json := Self.GetUser();
  WriteLn json.ToString();
  WriteLn('Roles:', Self.GetRoles());

  jsonArray := Self.GetSubscriptions();
  if jsonArray = nil then
    WriteLn('Subscription:', nil)
  else
    WriteLn('Subscription:', jsonArray.ToString());

  jsonArray := Self.GetFreeAccess();
  if jsonArray = nil then
    WriteLn('FreeAccess:', nil)
  else
    WriteLn('FreeAccess:', jsonArray.ToString());

  jsonArray := Self.GetScripts();
  if jsonArray = nil then
    WriteLn('Scripts:', nil)
  else
    WriteLn('Scripts:', jsonArray.ToString());

  jsonArray := Self.GetBundles();
  if jsonArray = nil then
    WriteLn('Bundles:', nil)
  else
    WriteLn('Bundles:', jsonArray.ToString());

  jsonArray := Self.GetProducts();
  if jsonArray = nil then
    WriteLn('Products:', nil)
  else
    WriteLn('Products:', jsonArray.ToString());

  WriteLn('SubbedProducts:', Self.GetSubscribbedProducts());
  WriteLn('BundledScripts:', Self.GetBundledScripts('86a1dbfc-338d-4c98-87c7-29b875549d9b'));
  WriteLn('SubbedScripts:', Self.GetSubscribbedScripts());
end;

var
  WaspClient: TWaspClient;

//FORM
function TControl.GetDPI(): Int32; static;
var
  tmp: TFont;
begin
  tmp.Init();
  Result := tmp.GetPixelsPerInch();
  tmp.Free();
end;

function TControl.AdjustToDPI(n: Int32): Int32; static;
begin
  Result := Round(n * TControl.GetDPI() / 96);
end;

function TComponent.NameMatch(name: TComponentName): Boolean;
begin
  Result := (Self <> nil) and (Self.GetName() = name);
end;

function TComponent.GetChild(name: TComponentName): TComponent;
var
  i, hi: Int32;
  child: TComponent;
begin
  if Self = nil then
    Exit;

  if Self.NameMatch(name) then
    Exit(Self);

  hi := Self.getComponentCount();

  if hi >= 0 then
    for i := 0 to hi - 1 do
    begin
      child := Self.GetComponent(i);

      if child.NameMatch(name) then
        Exit(child);

      Result := child.GetChild(name);
      if Result <> nil then
        Exit;
    end;

  Result := nil;
end;

(*
# WaspForm
Frontend form for the {ref}`WaspClient`.
*)
type
  TWaspForm = record
    Form: TForm;
    Size: TPoint;
  end;

const
  WINAPI_CC = {$IFDEF CPU386}'stdcall'{$ELSE}'win64'{$ENDIF};

function TWaspForm.SetWindowAttribute(
  hwnd: TOSWindow; dwAttribute: DWORD; pvAttribute: Pointer; cbAttribute: DWORD
): UInt32; static;
external 'DwmSetWindowAttribute@dwmapi.dll ' + WINAPI_CC;

function TWaspForm.SetWindowTheme(
  hwnd: TOSWindow; pszSubAppName: ^WideString; pszSubIdList: ^WideString
): UInt32; static;
external 'SetWindowTheme@uxtheme.dll ' + WINAPI_CC;

procedure TPanel.Create(owner: TControl; name: String);
begin
  Self.Init(owner);
  Self.setParent(owner);
  Self.setName(name + '_panel');
  Self.setCaption('');
  Self.setAlign(TAlign.alCustom);
  Self.setBorderStyle(TFormBorderStyle.bsNone);
  Self.setBevelWidth(0);
end;

procedure TLabel.Create(owner: TControl; caption: String; name: String = '');
begin
  Self.Init(owner);
  Self.setParent(owner);
  Self.setCaption(caption);
  if name <> '' then
    Self.SetName(name + '_label');
end;

procedure TCheckbox.Create(owner: TControl; name: String);
begin
  Self.Init(owner);
  Self.setParent(owner);
  Self.SetName(name + '_checkbox');
  Self.setCaption('');
end;

function TCheckBox.IsChecked(): Boolean;
begin
  Result := Self.getState() = cbChecked;
end;

procedure TCheckBox.Toggle();
begin
  case Self.getState() of
    cbChecked: Self.setState(cbUnchecked);
    else Self.setState(cbChecked)
  end;
end;


procedure TEdit.Create(owner: TControl; top: Int32; title: String; text: String = '');
var
  caption: TLabel;
begin
  caption.Create(owner, title + ':');
  caption.SetLeft(Self.AdjustToDPI(5));
  caption.SetTop(Self.AdjustToDPI(top));

  title := LowerCase(title);

  Self.Init(owner);
  Self.setParent(owner);
  Self.setName(title + '_edit');
  Self.SetLeft(Self.AdjustToDPI(5));
  Self.SetTop(Self.AdjustToDPI(top + 18));

  Self.setWidth(owner.getWidth() - Self.AdjustToDPI(10));
  Self.SetCaption(text);
  Self.getFont().setStyle([fsBold]);
end;



procedure TWaspForm.OnClose({$H-}sender: TObject; var closeAction: TCloseAction);{$H+}
begin
  TerminateScript();
end;

procedure TWaspForm.StartScript({$H-}sender: TObject);{$H+}
begin
  Self.Form.SetOnClose(nil);
  Self.Form.Close();
end;


procedure TWaspForm.Validate(edit: TEdit);
var
  panel: TPanel;
  email, password: TEdit;
  strMail: String;
begin
  panel := edit.getOwner();

  case edit.getName() of
    'email_edit':
    begin
      email := edit;
      password := panel.GetChild('password_edit');
    end;
    'password_edit':
    begin
      email := panel.GetChild('email_edit');
      password := edit;
    end;
    else
      TerminateScript('TWaspForm.Validate(), unknown control.');
  end;

  with email.getFont() do
  begin
    setStyle([fsBold]);
    setColor($F0F0F0);
  end;

  with password.getFont() do
  begin
    setStyle([fsBold]);
    setColor($F0F0F0);
  end;

  strMail := email.getText();
  TButton(panel.GetChild('login_button')).setEnabled(strMail.IsEmail() and (password.GetTextLen() > 4));
end;

procedure TWaspForm.MailField(sender: TObject; var key: char);
begin
  case key of
    ' ': key := #0;
    #13:
    begin
      Self.Validate(sender);
      TEdit(sender).PerformTab(True);
      Exit;
    end;
  end;
  Self.Validate(sender);
end;


procedure TWaspForm.HandleLogin();
var
  loginPanel, msPanel: TPanel;
begin
  loginPanel := Self.Form.GetChild('login_panel');
  msPanel := Self.Form.GetChild('main_panel');
  TLabel(msPanel.GetChild('user_label')).setCaption('Logged as: ' + WaspClient.User.Username);
  TLabel(msPanel.GetChild('id_label')).setCaption('ID: ' + WaspClient.User.Id);

  msPanel.Show();
  loginPanel.Hide();
end;

procedure TWaspForm.HandleLogout();
var
  loginPanel, msPanel: TPanel;
begin
  loginPanel := Self.Form.GetChild('login_panel');
  msPanel := Self.Form.GetChild('main_panel');
  loginPanel.Show();
  msPanel.Hide();
end;


procedure TWaspForm.Login({$H-}sender: TObject);{$H+}
var
  loginPanel, msPanel: TPanel;
  email, password: TEdit;
begin
  loginPanel := Self.Form.GetChild('login_panel');
  msPanel := Self.Form.GetChild('main_panel');

  email := loginPanel.GetChild('email_edit');
  password := loginPanel.GetChild('password_edit');

  if WaspClient.Login(email.getText(), password.getText()) then
  begin
    Self.HandleLogin();
    Exit;
  end;

  with email.getFont() do
  begin
    setColor($0000FF);
    setStyle([]);
  end;

  with password.getFont() do
  begin
    setColor($0000FF);
    setStyle([]);
  end;
end;

procedure TWaspForm.Logout({$H-}sender: TObject);{$H+}
var
  loginPanel, msPanel: TPanel;
begin
  loginPanel := Self.Form.GetChild('login_panel');
  msPanel := Self.Form.GetChild('main_panel');

  if WaspClient.Logout() then
    Self.HandleLogout();
end;


procedure TWaspForm.PasswordEdit(sender: TObject; var key: char);
begin
  case key of
    ' ': key := #0;
    #13:
    begin
      Self.Validate(sender);
      if TButton(Self.Form.GetChild('login_button')).IsEnabled() then
        Self.Login(sender);
      Exit;
    end;
  end;
  if (key in [' ']) then
    key := #0;
  Self.Validate(sender);
end;

procedure TWaspForm._OnEmailDone(sender: TObject);
var
  email: TEdit;
  str: String;
begin
  Self.Validate(sender);
  email := sender;
  str := LowerCase(Trim(email.getText()));
  if str.IsEmail() then
    WaspConfig.Put('email', LowerCase(Trim(email.getText())));
end;

procedure TWaspForm._OnPAssDone(sender: TObject);
begin
  Self.Validate(sender);
end;

procedure TWaspForm._OnTogglePass(sender: TObject);
var
  name: String;
  panel: TPanel;
  edit: TEdit;
  caption: TLabel;
  checkbox: TCheckBox;
begin
  panel := Self.Form.GetChild('login_panel');
  edit := panel.GetChild('password_edit');

  name := TControl(sender).GetName();
  if name.Contains('label') then
  begin
    caption := sender;
    checkbox := panel.GetChild('viewpass_checkbox');

    if checkbox.IsChecked() then
    begin
      caption.setCaption('Hide password');
      edit.setPasswordChar('*');
    end
    else
    begin
      caption.setCaption('Show password');
      edit.setPasswordChar(#0);
    end;

    checkbox.Toggle();
    Exit;
  end;

  checkbox := sender;
  caption := panel.GetChild('viewpass_label');

  if checkbox.IsChecked() then
    begin
      caption.setCaption('Hide password');
      edit.setPasswordChar('*');
    end
    else
    begin
      caption.setCaption('Show password');
      edit.setPasswordChar(#0);
    end;
end;




procedure TWaspForm.SetChildsDarkTheme(sender: TWinControl);
var
  i, hi: Int32;
  child: TControl;
  theme: WideString;
  name: String;
begin
  hi := sender.getComponentCount();

  if hi > 0 then
    for i := 0 to hi - 1 do
    begin
      child := sender.GetComponent(i);
      Self.SetChildsDarkTheme(child);
    end;

  name := sender.getName();
  if name = '' then Exit;

  if name.Contains('label') then
    Exit;

  if name.Contains('edit') or name.Contains('button') then
  begin
    theme := 'DarkMode_CFD';
    sender.setColor($303030);
    sender.getFont().setColor($F0F0F0);
  end
  else
    theme := 'DarkMode_Explorer';

  Self.SetWindowTheme(sender.getHandle(), @theme, nil);
end;

procedure TWaspForm.SetAllChildsDarkTheme();
var
  i, hi: Int32;
  child: TControl;
  theme: WideString;
begin
  hi := Self.Form.getComponentCount();

  if hi > 0 then
    for i := 0 to hi - 1 do
    begin
      child := Self.Form.GetComponent(i);
      Self.SetChildsDarkTheme(child);
    end;

  theme := 'DarkMode_Explorer';
  Self.SetWindowTheme(Self.Form.getHandle(), @theme, nil);
end;


procedure TWaspForm.SetupLoginPanel(form: TForm);
var
  panel: TPanel;
  edit: TEdit;
  button: TButton;
  email: String;
  viewPass: TCheckBox;
  viewPassLabel: TLabel;
begin
  panel.Create(form, 'login');

  panel.setWidth(TControl.AdjustToDPI(300));
  panel.setHeight(TControl.AdjustToDPI(180));
  panel.SetLeft(Self.Size.X div 2 - 300 div 2);
  panel.SetTop(Self.Size.Y div 2 - 150);

  email := WaspConfig.Get('email');
  if email = '' then
    email := 'email@mail.com';

  edit.Create(panel, 0, 'Email', email);
  edit.setOnKeyPress(@Self.MailField);
  edit.setOnEditingDone(@Self._OnEmailDone);

  edit.Create(panel, 50, 'Password');
  edit.setPasswordChar('*');
  edit.setOnKeyPress(@Self.PasswordEdit);
  edit.setOnEditingDone(@Self._OnPAssDone);

  viewPass.Create(panel, 'viewpass');
  viewPass.SetLeft(TControl.AdjustToDPI(10));
  viewPass.SetTop(TControl.AdjustToDPI(100));
  viewPass.setOnChange(@Self._OnTogglePass);

  viewPassLabel.Create(panel, 'Show password', 'viewpass');
  viewPassLabel.SetLeft(TControl.AdjustToDPI(30));
  viewPassLabel.SetTop(TControl.AdjustToDPI(102));
  viewPassLabel.setOnClick(@Self._OnTogglePass);
  viewPassLabel.getFont().setPitch(fpFixed);

  button.Init(panel);
  button.setParent(panel);
  button.setName('login_button');
  button.SetCaption('Login');
  button.setOnClick(@Self.Login);

  button.setWidth(TControl.AdjustToDPI(150));
  button.SetLeft(button.getParent().getWidth() div 2 - TControl.AdjustToDPI(150) div 2);
  button.SetTop(button.getParent().getHeight() - TControl.AdjustToDPI(40));
  button.setEnabled(False);
end;

procedure TWaspForm.SetupMainPanel(form: TForm);
var
  panel: TPanel;
  textLabel: TLabel;
  button: TButton;
begin
  panel.Create(form, 'main');

  panel.setWidth(Self.Size.X);
  panel.setHeight(Self.Size.Y);
  panel.SetLeft(0);
  panel.SetTop(0);

  textLabel.Init(panel);
  textLabel.SetParent(panel);
  textLabel.setName('user_label');
  textLabel.setCaption('');
  textLabel.setLeft(TControl.AdjustToDPI(10));
  textLabel.SetTop(TControl.AdjustToDPI(10));
  textLabel.getFont().setSize(20);

  textLabel.Init(panel);
  textLabel.SetParent(panel);
  textLabel.setName('id_label');
  textLabel.setCaption('');
  textLabel.setLeft(TControl.AdjustToDPI(10));
  textLabel.SetTop(TControl.AdjustToDPI(50));
  textLabel.getFont().setSize(20);

  button.Init(panel);
  button.setParent(panel);
  button.setName('logout_button');
  button.SetCaption('Logout');
  button.setOnClick(@Self.Logout);

  button.setWidth(TControl.AdjustToDPI(150));
  with button.getParent() do
  begin
    button.SetLeft(getWidth() div 2 - TControl.AdjustToDPI(150) div 2);
    button.SetTop(getHeight() - TControl.AdjustToDPI(40));
  end;
end;


procedure TWaspForm.OnShow(sender: TObject);
const
  ATTRIBUTE: DWORD = 20;
  DARK: LongBool = True;
begin
  Self.SetWindowAttribute(TForm(sender).getHandle(), ATTRIBUTE, @DARK, SizeOf(DARK));
  Self.SetAllChildsDarkTheme();

  if WaspClient.IsLoggedIn() then
    Self.HandleLogin()
  else
    Self.HandleLogout();
end;

procedure TWaspForm.Setup();
begin
  Self.Size := [TControl.AdjustToDPI(900), TControl.AdjustToDPI(600)];

  Self.Form.Init(nil);
  Self.Form.SetName('wasp_form');
  Self.Form.setCaption('WaspScripts');
  Self.Form.setWidth(Self.Size.X);
  Self.Form.setHeight(Self.Size.Y);
  Self.Form.getConstraints().SetInterfaceConstraints(Self.Size.X, Self.Size.Y, Self.Size.X, Self.Size.Y);
  Self.Form.setPosition(TPosition.poScreenCenter);
  Self.Form.setOnClose(@Self.OnClose);
  Self.Form.setColor($242322);
  Self.Form.setOnShow(@Self.OnShow);

  with Self.Form.getFont() do
  begin
    setQuality(TFontQuality.fqAntialiased);
    setPitch(TFontPitch.fpFixed);
    SetColor($F0F0F0);
  end;

  Self.SetupLoginPanel(Self.Form);
  Self.SetupMainPanel(Self.Form);
end;

procedure TWaspForm.Show();
begin
  try
    Self.Form.ShowModal();
  except
    Writeln(GetExceptionMessage());
  finally
    Self.Form.Free();
  end;
end;

procedure TWaspForm.Run();
begin
  Self.Setup();
  Sync(@Self.Show);
end;

var
  WaspForm: TWaspForm;

begin
  WaspClient.Setup();
  WaspForm.Run();
end;
